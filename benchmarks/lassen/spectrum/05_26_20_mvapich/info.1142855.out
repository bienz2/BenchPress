Warning: location of ompi_info differs from OPAL_PREFIX / MPI_ROOT.
ompi_info at /opt/ibm/spectrum_mpi/bin
OPAL_PREFIX=/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release
MPI_ROOT=/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release
                 Package: IBM Spectrum MPI
            Spectrum MPI: 10.3.0.01rtm3
Spectrum MPI repo revision: IBM_SPECTRUM_MPI_10.03.00.01_2019.06.11_RTM3
Spectrum MPI release date: Unreleased developer copy
                Open RTE: 10.3.0.01rtm3
  Open RTE repo revision: IBM_SPECTRUM_MPI_10.03.00.01_2019.06.11_RTM3
   Open RTE release date: Unreleased developer copy
                    OPAL: 10.3.0.01rtm3
      OPAL repo revision: IBM_SPECTRUM_MPI_10.03.00.01_2019.06.11_RTM3
       OPAL release date: Unreleased developer copy
                 MPI API: 3.1.0
            Ident string: IBM Spectrum MPI
                  Prefix: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release
             Exec_prefix: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release
                  Bindir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/bin
                 Sbindir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/sbin
                  Libdir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/lib
                  Incdir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/include
                  Mandir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/man
               Pkglibdir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/lib/spectrum_mpi
              Libexecdir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/libexec
             Datarootdir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/share
                 Datadir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/share
              Sysconfdir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/etc
          Sharedstatedir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/com
           Localstatedir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/var
                 Infodir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/info
              Pkgdatadir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/share/spectrum_mpi
               Pkglibdir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/lib/spectrum_mpi
           Pkgincludedir: /usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/include/spectrum_mpi
 Configured architecture: powerpc64le-unknown-linux-gnu
          Configure host: c685f4n16.pok.stglabs.ibm.com
           Configured by: gpaulsen
           Configured on: Tue Jun 11 20:02:56 EDT 2019
          Configure host: c685f4n16.pok.stglabs.ibm.com
  Configure command line: '--with-platform=flags' '--prefix=/__SMPI_build_dir________________________/exports/optimized' '--exec-prefix=/__SMPI_build_dir________________________/exports/optimized'
                Built by: gpaulsen
                Built on: Tue Jun 11 20:29:01 EDT 2019
              Built host: c685f4n16.pok.stglabs.ibm.com
              C bindings: yes
            C++ bindings: no
             Fort mpif.h: yes (all)
            Fort use mpi: yes (limited: overloading)
       Fort use mpi size: deprecated-ompi-info-value
        Fort use mpi_f08: no
 Fort mpi_f08 compliance: The mpi_f08 module was not built
  Fort mpi_f08 subarrays: no
           Java bindings: no
  Wrapper compiler rpath: disabled
              C compiler: gcc
     C compiler absolute: /usr/bin/gcc
  C compiler family name: GNU
      C compiler version: 4.8.5
             C char size: 1
             C bool size: 1
            C short size: 2
              C int size: 4
             C long size: 8
            C float size: 4
           C double size: 8
          C pointer size: 8
            C char align: 1
            C bool align: skipped
             C int align: 4
           C float align: 4
          C double align: 8
            C++ compiler: g++
   C++ compiler absolute: /usr/bin/g++
           Fort compiler: gfortran
       Fort compiler abs: /usr/bin/gfortran
         Fort ignore TKR: no
   Fort 08 assumed shape: no
      Fort optional args: no
          Fort INTERFACE: yes
    Fort ISO_FORTRAN_ENV: yes
       Fort STORAGE_SIZE: no
      Fort BIND(C) (all): no
      Fort ISO_C_BINDING: yes
 Fort SUBROUTINE BIND(C): no
       Fort TYPE,BIND(C): no
 Fort T,BIND(C,name="a"): no
            Fort PRIVATE: no
          Fort PROTECTED: no
           Fort ABSTRACT: no
       Fort ASYNCHRONOUS: no
          Fort PROCEDURE: no
         Fort USE...ONLY: no
           Fort C_FUNLOC: no
 Fort f08 using wrappers: no
         Fort MPI_SIZEOF: no
       Fort integer size: 4
       Fort logical size: 4
 Fort logical value true: 1
      Fort have integer1: yes
      Fort have integer2: yes
      Fort have integer4: yes
      Fort have integer8: yes
     Fort have integer16: no
         Fort have real4: yes
         Fort have real8: yes
        Fort have real16: yes
      Fort have complex8: yes
     Fort have complex16: yes
     Fort have complex32: yes
      Fort integer1 size: 1
      Fort integer2 size: 2
      Fort integer4 size: 4
      Fort integer8 size: 8
     Fort integer16 size: -1
          Fort real size: 4
         Fort real4 size: 4
         Fort real8 size: 8
        Fort real16 size: 16
      Fort dbl prec size: 8
          Fort cplx size: 8
      Fort dbl cplx size: 16
         Fort cplx8 size: 8
        Fort cplx16 size: 16
        Fort cplx32 size: 32
      Fort integer align: 4
     Fort integer1 align: 1
     Fort integer2 align: 2
     Fort integer4 align: 4
     Fort integer8 align: 8
    Fort integer16 align: -1
         Fort real align: 4
        Fort real4 align: 4
        Fort real8 align: 8
       Fort real16 align: 16
     Fort dbl prec align: 8
         Fort cplx align: 4
     Fort dbl cplx align: 8
        Fort cplx8 align: 4
       Fort cplx16 align: 8
       Fort cplx32 align: 16
             C profiling: yes
           C++ profiling: no
   Fort mpif.h profiling: yes
  Fort use mpi profiling: yes
   Fort use mpi_f08 prof: no
          C++ exceptions: no
          Thread support: posix (MPI_THREAD_MULTIPLE: yes, OPAL support: yes, OMPI progress: no, ORTE progress: yes, Event lib: yes)
           Sparse Groups: no
            Build CFLAGS: -DNDEBUG -m64 -O3 -DSMPI_IS_EVAL_EDITION=0 -Wall -Wundef -Wno-long-long -Wsign-compare -Wmissing-prototypes -Wstrict-prototypes -Wcomment -pedantic -Werror-implicit-function-declaration -finline-functions -fno-strict-aliasing -pthread
          Build CXXFLAGS: -DNDEBUG -m64 -O3 -Wall -Wundef -Wno-long-long -finline-functions -pthread
           Build FCFLAGS: -m64 -O3
           Build LDFLAGS: -L/__SMPI_build_dir________________________/dependencies/lib -L/__SMPI_build_dir________________________/mofed/mofed_451/usr/lib -L/__SMPI_build_dir________________________/mofed/mofed_451/opt/mellanox/mxm/lib -L/__SMPI_build_dir________________________/mofed/mofed_451/opt/mellanox/hcoll/lib -L/__SMPI_build_dir________________________/mofed/mofed_451/opt/mellanox/sharp/lib -L/__SMPI_build_dir________________________/cuda/cuda-10.1/lib/nvidia -L/__SMPI_build_dir________________________/cuda/cuda-10.1/lib   -L/__SMPI_build_dir________________________/hwloc/hwloc-2.0.3_ompi-cuda-10.1-libevent-2.1.8/lib  -L/__SMPI_build_dir________________________/libevent/libevent-2.1.8/lib
              Build LIBS: -lrt -lm -lutil   -lhwloc_ompi -lhwloc_ompi -levent -levent_pthreads
    Wrapper extra CFLAGS: -pthread
  Wrapper extra CXXFLAGS: -pthread
   Wrapper extra FCFLAGS: -pthread  -I${libdir}
   Wrapper extra LDFLAGS: -L/__SMPI_build_dir________________________/hwloc/hwloc-2.0.3_ompi-cuda-10.1-libevent-2.1.8/lib -L/__SMPI_build_dir________________________/libevent/libevent-2.1.8/lib
      Wrapper extra LIBS: -lhwloc_ompi -ldl -levent -levent_pthreads -lutil -lm  -lrt
  Internal debug support: no
  MPI interface warnings: yes
     MPI parameter check: runtime
Memory profiling support: no
Memory debugging support: no
              dl support: yes
   Heterogeneous support: no
 mpirun default --prefix: yes
       MPI_WTIME support: native
     Symbol vis. support: yes
   Host topology support: yes
            IPv6 support: no
      MPI1 compatibility: yes
          MPI extensions: 
   FT Checkpoint support: no (checkpoint thread: no)
   C/R Enabled Debugging: no
  MPI_MAX_PROCESSOR_NAME: 256
    MPI_MAX_ERROR_STRING: 256
     MPI_MAX_OBJECT_NAME: 64
        MPI_MAX_INFO_KEY: 36
        MPI_MAX_INFO_VAL: 256
       MPI_MAX_PORT_NAME: 1024
  MPI_MAX_DATAREP_STRING: 128
           MCA allocator: basic (MCA v2.1.0, API v2.0.0, Component v10.3.0)
           MCA allocator: bucket (MCA v2.1.0, API v2.0.0, Component v10.3.0)
           MCA backtrace: lwcore (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA btl: openib (MCA v2.1.0, API v3.1.0, Component v10.3.0)
                 MCA btl: self (MCA v2.1.0, API v3.1.0, Component v10.3.0)
                 MCA btl: smcuda (MCA v2.1.0, API v3.1.0, Component v10.3.0)
                 MCA btl: tcp (MCA v2.1.0, API v3.1.0, Component v10.3.0)
                 MCA btl: vader (MCA v2.1.0, API v3.1.0, Component v10.3.0)
            MCA compress: bzip (MCA v2.1.0, API v2.0.0, Component v10.3.0)
            MCA compress: gzip (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA crs: none (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                  MCA dl: dlopen (MCA v2.1.0, API v1.0.0, Component v10.3.0)
               MCA event: external (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA hwloc: external (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                  MCA if: linux_ipv6 (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                  MCA if: posix_ipv4 (MCA v2.1.0, API v2.0.0, Component v10.3.0)
         MCA installdirs: env (MCA v2.1.0, API v2.0.0, Component v10.3.0)
         MCA installdirs: config (MCA v2.1.0, API v2.0.0, Component v10.3.0)
              MCA memory: patcher (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA mpool: hugepage (MCA v2.1.0, API v3.0.0, Component v10.3.0)
             MCA patcher: overwrite (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                MCA pmix: ext3x (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA pmix: flux (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA pmix: isolated (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA pstat: linux (MCA v2.1.0, API v2.0.0, Component v10.3.0)
              MCA rcache: gpusm (MCA v2.1.0, API v3.3.0, Component v10.3.0)
              MCA rcache: grdma (MCA v2.1.0, API v3.3.0, Component v10.3.0)
              MCA rcache: rgpusm (MCA v2.1.0, API v3.3.0, Component v10.3.0)
           MCA reachable: weighted (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA shmem: mmap (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA shmem: posix (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA shmem: sysv (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA timer: linux (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA dfs: app (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                 MCA dfs: orted (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                 MCA dfs: test (MCA v2.1.0, API v1.0.0, Component v10.3.0)
              MCA errmgr: default_app (MCA v2.1.0, API v3.0.0, Component v10.3.0)
              MCA errmgr: default_hnp (MCA v2.1.0, API v3.0.0, Component v10.3.0)
              MCA errmgr: default_orted (MCA v2.1.0, API v3.0.0, Component v10.3.0)
              MCA errmgr: default_tool (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA ess: env (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA ess: hnp (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA ess: lsf (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA ess: pmi (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA ess: singleton (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA ess: tool (MCA v2.1.0, API v3.0.0, Component v10.3.0)
               MCA filem: raw (MCA v2.1.0, API v2.0.0, Component v10.3.0)
             MCA grpcomm: direct (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA iof: hnp (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA iof: orted (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA iof: tool (MCA v2.1.0, API v2.0.0, Component v10.3.0)
            MCA notifier: syslog (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                MCA odls: pspawn (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA odls: default (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA oob: tcp (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA plm: isolated (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA plm: lsf (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA plm: rsh (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA ras: lsf (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA ras: simulator (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA regx: fwd (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                MCA regx: reverse (MCA v2.1.0, API v1.0.0, Component v10.3.0)
               MCA rmaps: mindist (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA rmaps: ppr (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA rmaps: rank_file (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA rmaps: resilient (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA rmaps: round_robin (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA rmaps: seq (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA rml: oob (MCA v2.1.0, API v3.0.0, Component v10.3.0)
              MCA routed: binomial (MCA v2.1.0, API v3.0.0, Component v10.3.0)
              MCA routed: debruijn (MCA v2.1.0, API v3.0.0, Component v10.3.0)
              MCA routed: direct (MCA v2.1.0, API v3.0.0, Component v10.3.0)
              MCA routed: radix (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA rtc: hwloc (MCA v2.1.0, API v1.0.0, Component v10.3.0)
              MCA schizo: flux (MCA v2.1.0, API v1.0.0, Component v10.3.0)
              MCA schizo: jsm (MCA v2.1.0, API v1.0.0, Component v10.3.0)
              MCA schizo: ompi (MCA v2.1.0, API v1.0.0, Component v10.3.0)
              MCA schizo: orte (MCA v2.1.0, API v1.0.0, Component v10.3.0)
               MCA state: app (MCA v2.1.0, API v1.0.0, Component v10.3.0)
               MCA state: hnp (MCA v2.1.0, API v1.0.0, Component v10.3.0)
               MCA state: novm (MCA v2.1.0, API v1.0.0, Component v10.3.0)
               MCA state: orted (MCA v2.1.0, API v1.0.0, Component v10.3.0)
               MCA state: tool (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                 MCA bml: r2 (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: basic (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: cuda (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: ibm (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: inter (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: libnbc (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: monitoring (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: self (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: sm (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: sync (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA coll: tuned (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA fbtl: posix (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA fcoll: dynamic (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA fcoll: dynamic_gen2 (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA fcoll: individual (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA fcoll: two_phase (MCA v2.1.0, API v2.0.0, Component v10.3.0)
               MCA fcoll: vulcan (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                  MCA fs: ufs (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA hook: ibmlicense (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                MCA hook: prot (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                MCA hook: state (MCA v2.1.0, API v1.0.0, Component v10.3.0)
                  MCA io: ompio (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                  MCA io: romio321 (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA osc: monitoring (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA osc: pami (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA osc: pt2pt (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA osc: rdma (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA osc: sm (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA osc: ucx (MCA v2.1.0, API v3.0.0, Component v10.3.0)
                 MCA pml: v (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA pml: cm (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA pml: monitoring (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA pml: ob1 (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA pml: pami (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA pml: ucx (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA pml: yalla (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                 MCA rte: orte (MCA v2.1.0, API v2.0.0, Component v10.3.0)
            MCA sharedfp: individual (MCA v2.1.0, API v2.0.0, Component v10.3.0)
            MCA sharedfp: lockedfile (MCA v2.1.0, API v2.0.0, Component v10.3.0)
            MCA sharedfp: sm (MCA v2.1.0, API v2.0.0, Component v10.3.0)
                MCA topo: basic (MCA v2.1.0, API v2.2.0, Component v10.3.0)
                MCA topo: treematch (MCA v2.1.0, API v2.2.0, Component v10.3.0)
           MCA vprotocol: pessimist (MCA v2.1.0, API v2.0.0, Component v10.3.0)
            MCA mca base: ---------------------------------------------------
            MCA mca base: parameter "mca_param_files" (current value: "/g/g14/bienz1/.openmpi/mca-params.conf,/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/etc/openmpi-mca-params.conf", data source: default, level: 2 user/detail, type: string, deprecated, synonym of: mca_base_param_files)
                          Path for MCA configuration files containing variable values
            MCA mca base: parameter "mca_component_path" (current value: "/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/lib/spectrum_mpi:/g/g14/bienz1/.openmpi/components", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: mca_base_component_path)
                          Path where to look for additional components
            MCA mca base: parameter "mca_component_show_load_errors" (current value: "false", data source: environment, level: 9 dev/all, type: bool, deprecated, synonym of: mca_base_component_show_load_errors)
                          Whether to show errors for components that failed to load or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mca base: parameter "mca_component_disable_dlopen" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: mca_base_component_disable_dlopen)
                          Whether to attempt to disable opening dynamic components or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mca base: parameter "mca_verbose" (current value: "stderr", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: mca_base_verbose)
                          Specifies where the default error output stream goes (this is separate from distinct help messages).  Accepts a comma-delimited list of: stderr, stdout, syslog, syslogpri:<notice|info|debug>, syslogid:<str> (where str is the prefix string for all syslog notices), file[:filename] (if filename is not specified, a default filename is used), fileappend (if not specified, the file is opened for truncation), level[:N] (if specified, integer verbose level; otherwise, 0 is implied)
            MCA mca base: ---------------------------------------------------
            MCA mca base: parameter "mca_base_param_files" (current value: "/g/g14/bienz1/.openmpi/mca-params.conf,/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/etc/openmpi-mca-params.conf", data source: default, level: 2 user/detail, type: string, synonyms: mca_param_files)
                          Path for MCA configuration files containing variable values
            MCA mca base: informational "mca_base_override_param_file" (current value: "/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/etc/openmpi-mca-params-override.conf", data source: default, level: 2 user/detail, type: string)
                          Variables set in this file will override any value set inthe environment or another configuration file
            MCA mca base: parameter "mca_base_suppress_override_warning" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Suppress warnings when attempting to set an overridden value (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mca base: parameter "mca_base_param_file_prefix" (current value: "", data source: default, level: 3 user/all, type: string)
                          Aggregate MCA parameter file sets
            MCA mca base: parameter "mca_base_envar_file_prefix" (current value: "", data source: default, level: 3 user/all, type: string)
                          Aggregate MCA parameter file set for env variables
            MCA mca base: parameter "mca_base_param_file_path" (current value: "/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/share/spectrum_mpi/amca-param-sets:/g/g14/bienz1/nodecomm", data source: default, level: 3 user/all, type: string)
                          Aggregate MCA parameter Search path
            MCA mca base: parameter "mca_base_param_file_path_force" (current value: "", data source: default, level: 3 user/all, type: string)
                          Forced Aggregate MCA parameter Search path
            MCA mca base: parameter "mca_base_env_list" (current value: "", data source: default, level: 3 user/all, type: string)
                          Set SHELL env variables
            MCA mca base: parameter "mca_base_env_list_delimiter" (current value: ";", data source: default, level: 3 user/all, type: string)
                          Set SHELL env variables delimiter. Default: semicolon ';'
            MCA mca base: parameter "mca_base_component_path" (current value: "/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/lib/spectrum_mpi:/g/g14/bienz1/.openmpi/components", data source: default, level: 9 dev/all, type: string, synonyms: mca_component_path)
                          Path where to look for additional components
            MCA mca base: parameter "mca_base_component_show_load_errors" (current value: "false", data source: environment, level: 9 dev/all, type: bool, synonyms: mca_component_show_load_errors)
                          Whether to show errors for components that failed to load or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mca base: parameter "mca_base_component_track_load_errors" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to track errors for components that failed to load or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mca base: parameter "mca_base_component_disable_dlopen" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: mca_component_disable_dlopen)
                          Whether to attempt to disable opening dynamic components or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mca base: parameter "mca_base_verbose" (current value: "stderr", data source: default, level: 9 dev/all, type: string, synonyms: mca_verbose)
                          Specifies where the default error output stream goes (this is separate from distinct help messages).  Accepts a comma-delimited list of: stderr, stdout, syslog, syslogpri:<notice|info|debug>, syslogid:<str> (where str is the prefix string for all syslog notices), file[:filename] (if filename is not specified, a default filename is used), fileappend (if not specified, the file is opened for truncation), level[:N] (if specified, integer verbose level; otherwise, 0 is implied)
           MCA opal base: ---------------------------------------------------
           MCA opal base: parameter "opal_signal" (current value: "6,7,8,11", data source: environment, level: 3 user/all, type: string)
                          Comma-delimited list of integer signal numbers to Open MPI to attempt to intercept.  Upon receipt of the intercepted signal, Open MPI will display a stack trace and abort.  Open MPI will *not* replace signals if handlers are already installed by the time MPI_INIT is invoked.  Optionally append ":complain" to any signal number in the comma-delimited list to make Open MPI complain if it detects another signal handler (and therefore does not insert its own).
           MCA opal base: parameter "opal_stacktrace_output" (current value: "stderr", data source: default, level: 3 user/all, type: string)
                          Specifies where the stack trace output stream goes.  Accepts one of the following: none (disabled), stderr (default), stdout, file[:filename].   If 'filename' is not specified, a default filename of 'stacktrace' is used.  The 'filename' is appended with either '.PID' or '.RANK.PID', if RANK is available.  The 'filename' can be an absolute path or a relative path to the current working directory.
           MCA opal base: parameter "opal_set_max_sys_limits" (current value: "", data source: default, level: 3 user/all, type: string)
                          Set the specified system-imposed limits to the specified value, including "unlimited".Supported params: core, filesize, maxmem, openfiles, stacksize, maxchildren
           MCA opal base: informational "opal_built_with_cuda_support" (current value: "true", data source: default, level: 4 tuner/basic, type: bool, synonyms: mpi_built_with_cuda_support)
                          Whether CUDA GPU buffer support is built into library or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA opal base: parameter "opal_cuda_support" (current value: "true", data source: default, level: 3 user/all, type: bool, synonyms: mpi_cuda_support)
                          Whether CUDA GPU buffer support is enabled or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA opal base: parameter "opal_warn_on_missing_libcuda" (current value: "true", data source: default, level: 3 user/all, type: bool)
                          Whether to print a message when CUDA support is enabled but libcuda is not found
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA opal base: parameter "opal_leave_pinned" (current value: "true", data source: environment, level: 9 dev/all, type: int, deprecated, synonym of: mpi_leave_pinned)
                          Whether to use the "leave pinned" protocol or not.  Enabling this setting can help bandwidth performance when repeatedly sending and receiving large messages with the same buffers over RDMA-based networks (false = do not use "leave pinned" protocol, true = use "leave pinned" protocol, auto = allow network to choose at runtime).
                          Valid values: -1: auto, 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA opal base: parameter "opal_leave_pinned_pipeline" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: mpi_leave_pinned_pipeline)
                          Whether to use the "leave pinned pipeline" protocol or not.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA opal base: parameter "opal_abort_delay" (current value: "0", data source: default, level: 5 tuner/detail, type: int, synonyms: mpi_abort_delay)
                          If nonzero, print out an identifying message when abort operation is invoked (hostname, PID of the process that called abort) and delay for that many seconds before exiting (a negative delay value means to never abort).  This allows attaching of a debugger before quitting the job.
           MCA opal base: parameter "opal_abort_print_stack" (current value: "false", data source: default, level: 5 tuner/detail, type: bool, synonyms: mpi_abort_print_stack)
                          If nonzero, print out a stack trace when abort is invoked
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA opal net: ---------------------------------------------------
            MCA opal net: parameter "opal_net_private_ipv4" (current value: "10.0.0.0/8;172.16.0.0/12;192.168.0.0/16;169.254.0.0/16", data source: default, level: 3 user/all, type: string)
                          Semicolon-delimited list of CIDR notation entries specifying what networks are considered "private" (default value based on RFC1918 and RFC3330)
      MCA allocator base: ---------------------------------------------------
      MCA allocator base: parameter "allocator" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the allocator framework (<none> means use all components that can be found)
      MCA allocator base: ---------------------------------------------------
      MCA allocator base: parameter "allocator_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the allocator framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
    MCA allocator bucket: ---------------------------------------------------
    MCA allocator bucket: parameter "allocator_bucket_num_buckets" (current value: "30", data source: default, level: 9 dev/all, type: int)
      MCA backtrace base: ---------------------------------------------------
      MCA backtrace base: parameter "backtrace" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the backtrace framework (<none> means use all components that can be found)
      MCA backtrace base: ---------------------------------------------------
      MCA backtrace base: parameter "backtrace_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the backtrace framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
    MCA backtrace lwcore: ---------------------------------------------------
    MCA backtrace lwcore: parameter "backtrace_lwcore_enable" (current value: "true", data source: environment, level: 3 user/all, type: bool)
                          Enable lightweight cores
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA btl base: ---------------------------------------------------
            MCA btl base: parameter "btl" (current value: "self", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the btl framework (<none> means use all components that can be found)
            MCA btl base: ---------------------------------------------------
            MCA btl base: parameter "btl_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the btl framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA btl base: parameter "btl_base_include" (current value: "", data source: default, level: 9 dev/all, type: string)
            MCA btl base: parameter "btl_base_exclude" (current value: "", data source: default, level: 9 dev/all, type: string)
            MCA btl base: parameter "btl_base_warn_component_unused" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          This parameter is used to turn on warning messages when certain NICs are not used
      MCA (-) btl openib: ---------------------------------------------------
      MCA (-) btl openib: parameter "btl_openib_verbose" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Output some verbose OpenIB BTL information (0 = no output, nonzero = output)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_warn_no_device_params_found" (current value: "true", data source: default, level: 9 dev/all, type: bool, synonyms: btl_openib_warn_no_hca_params_found)
                          Warn when no device-specific parameters are found in the INI file specified by the btl_openib_device_param_files MCA parameter (0 = do not warn; any other value = warn)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_warn_default_gid_prefix" (current value: "false", data source: environment, level: 9 dev/all, type: bool)
                          Warn when there is more than one active ports and at least one of them connected to the network with only default GID prefix configured (0 = do not warn; any other value = warn)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_warn_nonexistent_if" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Warn if non-existent devices and/or ports are specified in the btl_openib_if_[in|ex]clude MCA parameters (0 = do not warn; any other value = warn)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_abort_not_enough_reg_mem" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If there is not enough registered memory available on the system for Open MPI to function properly, Open MPI will issue a warning.  If this MCA parameter is set to true, then Open MPI will also abort all MPI jobs (0 = warn, but do not abort; any other value = warn and abort)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_poll_cq_batch" (current value: "256", data source: default, level: 9 dev/all, type: unsigned_int)
                          Retrieve up to poll_cq_batch completions from CQ
      MCA (-) btl openib: parameter "btl_openib_device_param_files" (current value: "/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/share/spectrum_mpi/mca-btl-openib-device-params.ini", data source: default, level: 9 dev/all, type: string, synonyms: btl_openib_hca_param_files)
                          Colon-delimited list of INI-style files that contain device vendor/part-specific parameters (use semicolon for Windows)
      MCA (-) btl openib: parameter "btl_openib_device_type" (current value: "all", data source: default, level: 9 dev/all, type: int)
                          Specify to only use IB or iWARP network adapters (infiniband = only use InfiniBand HCAs; iwarp = only use iWARP NICs; all = use any available adapters)
                          Valid values: 0:"infiniband", 0:"ib", 1:"iwarp", 1:"iw", 2:"all"
      MCA (-) btl openib: parameter "btl_openib_allow_ib" (current value: "true", data source: environment, level: 5 tuner/detail, type: bool)
                          Override policy since Open MPI 4.0 of ignoring IB HCAs for openib BTL
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_max_btls" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum number of device ports to use (-1 = use all available, otherwise must be >= 1)
      MCA (-) btl openib: parameter "btl_openib_free_list_num" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Initial size of free lists (must be >= 1)
      MCA (-) btl openib: parameter "btl_openib_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum size of free lists (-1 = infinite, otherwise must be >= 0)
      MCA (-) btl openib: parameter "btl_openib_free_list_inc" (current value: "32", data source: default, level: 9 dev/all, type: int)
                          Increment size of free lists (must be >= 1)
      MCA (-) btl openib: parameter "btl_openib_mpool_hints" (current value: "", data source: default, level: 9 dev/all, type: string)
                          hints for selecting a memory pool (default: none)
      MCA (-) btl openib: parameter "btl_openib_rcache" (current value: "grdma", data source: default, level: 9 dev/all, type: string)
                          Name of the registration cache to be used (it is unlikely that you will ever want to change this)
      MCA (-) btl openib: parameter "btl_openib_reg_mru_len" (current value: "16", data source: default, level: 9 dev/all, type: int)
                          Length of the registration cache most recently used list (must be >= 1)
      MCA (-) btl openib: parameter "btl_openib_cq_size" (current value: "8192", data source: default, level: 9 dev/all, type: int, synonyms: btl_openib_ib_cq_size)
                          Minimum size of the OpenFabrics completion queue (CQs are automatically sized based on the number of peer MPI processes; this value determines the *minimum* size of all CQs)
      MCA (-) btl openib: parameter "btl_openib_max_inline_data" (current value: "-1", data source: default, level: 9 dev/all, type: int, synonyms: btl_openib_ib_max_inline_data)
                          Maximum size of inline data segment (-1 = run-time probe to discover max value, otherwise must be >= 0). If not explicitly set, use max_inline_data from the INI file containing device-specific parameters
      MCA (-) btl openib: parameter "btl_openib_pkey" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int, synonyms: btl_openib_ib_pkey_val)
                          OpenFabrics partition key (pkey) value. Unsigned integer decimal or hex values are allowed (e.g., "3" or "0x3f") and will be masked against the maximum allowable IB partition key value (0x7fff)
      MCA (-) btl openib: parameter "btl_openib_psn" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int, synonyms: btl_openib_ib_psn)
                          OpenFabrics packet sequence starting number (must be >= 0)
      MCA (-) btl openib: parameter "btl_openib_ib_qp_ous_rd_atom" (current value: "4", data source: default, level: 9 dev/all, type: unsigned_int)
                          InfiniBand outstanding atomic reads (must be >= 0)
      MCA (-) btl openib: parameter "btl_openib_ib_min_rnr_timer" (current value: "25", data source: default, level: 9 dev/all, type: unsigned_int)
                          InfiniBand minimum "receiver not ready" timer, in seconds (must be >= 0 and <= 31)
      MCA (-) btl openib: parameter "btl_openib_ib_timeout" (current value: "20", data source: default, level: 9 dev/all, type: unsigned_int)
                          InfiniBand transmit timeout, plugged into formula: 4.096 microseconds * (2^btl_openib_ib_timeout) (must be >= 0 and <= 31)
      MCA (-) btl openib: parameter "btl_openib_ib_retry_count" (current value: "7", data source: default, level: 9 dev/all, type: unsigned_int)
                          InfiniBand transmit retry count (must be >= 0 and <= 7)
      MCA (-) btl openib: parameter "btl_openib_ib_rnr_retry" (current value: "7", data source: default, level: 9 dev/all, type: unsigned_int)
                          InfiniBand "receiver not ready" retry count; applies *only* to SRQ/XRC queues.  PP queues use RNR retry values of 0 because Open MPI performs software flow control to guarantee that RNRs never occur (must be >= 0 and <= 7; 7 = "infinite")
      MCA (-) btl openib: parameter "btl_openib_ib_max_rdma_dst_ops" (current value: "4", data source: default, level: 9 dev/all, type: unsigned_int)
                          InfiniBand maximum pending RDMA destination operations (must be >= 0)
      MCA (-) btl openib: parameter "btl_openib_ib_service_level" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
                          InfiniBand service level (must be >= 0 and <= 15)
      MCA (-) btl openib: parameter "btl_openib_ib_path_record_service_level" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
                          Enable getting InfiniBand service level from PathRecord (must be >= 0, 0 = disabled, positive = try to get the service level from PathRecord)
      MCA (-) btl openib: parameter "btl_openib_use_eager_rdma" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Use RDMA for eager messages (-1 = use device default, 0 = do not use eager RDMA, 1 = use eager RDMA)
      MCA (-) btl openib: parameter "btl_openib_eager_rdma_threshold" (current value: "16", data source: default, level: 9 dev/all, type: int)
                          Use RDMA for short messages after this number of messages are received from a given peer (must be >= 1)
      MCA (-) btl openib: parameter "btl_openib_max_eager_rdma" (current value: "16", data source: default, level: 9 dev/all, type: int)
                          Maximum number of peers allowed to use RDMA for short messages (RDMA is used for all long messages, except if explicitly disabled, such as with the "dr" pml) (must be >= 0)
      MCA (-) btl openib: parameter "btl_openib_eager_rdma_num" (current value: "17", data source: default, level: 9 dev/all, type: int)
                          Number of RDMA buffers to allocate for small messages (must be >= 1)
      MCA (-) btl openib: parameter "btl_openib_btls_per_lid" (current value: "1", data source: default, level: 9 dev/all, type: unsigned_int)
                          Number of BTLs to create for each InfiniBand LID (must be >= 1)
      MCA (-) btl openib: parameter "btl_openib_max_lmc" (current value: "1", data source: default, level: 9 dev/all, type: unsigned_int)
                          Maximum number of LIDs to use for each device port (must be >= 0, where 0 = use all available)
      MCA (-) btl openib: parameter "btl_openib_enable_apm_over_lmc" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Maximum number of alternative paths for each device port (must be >= -1, where 0 = disable apm, -1 = all available alternative paths )
      MCA (-) btl openib: parameter "btl_openib_enable_apm_over_ports" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Enable alternative path migration (APM) over different ports of the same device (must be >= 0, where 0 = disable APM over ports, 1 = enable APM over ports of the same device)
      MCA (-) btl openib: parameter "btl_openib_use_async_event_thread" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, use the thread that will handle InfiniBand asynchronous events
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_enable_srq_resize" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Enable/Disable on demand SRQ resize. (0 = without resizing, nonzero = with resizing)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_rroce_enable" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable/Disable routing between different subnets(0 = disable, nonzero = enable)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_buffer_alignment" (current value: "64", data source: default, level: 9 dev/all, type: unsigned_int)
                          Preferred communication buffer alignment, in bytes (must be > 0 and power of two)
      MCA (-) btl openib: parameter "btl_openib_use_message_coalescing" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, use message coalescing
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_cq_poll_ratio" (current value: "100", data source: default, level: 9 dev/all, type: unsigned_int)
                          How often to poll high priority CQ versus low priority CQ
      MCA (-) btl openib: parameter "btl_openib_eager_rdma_poll_ratio" (current value: "100", data source: default, level: 9 dev/all, type: unsigned_int)
                          How often to poll eager RDMA channel versus CQ
      MCA (-) btl openib: parameter "btl_openib_hp_cq_poll_per_progress" (current value: "10", data source: default, level: 9 dev/all, type: unsigned_int)
                          Max number of completion events to process for each call of BTL progress engine
      MCA (-) btl openib: parameter "btl_openib_max_hw_msg_size" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
                          Maximum size (in bytes) of a single fragment of a long message when using the RDMA protocols (must be > 0 and <= hw capabilities).
      MCA (-) btl openib: parameter "btl_openib_allow_max_memory_registration" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Allow maximum possible memory to register with HCA
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_memory_registration_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Output some verbose memory registration information (0 = no output, nonzero = output)
      MCA (-) btl openib: parameter "btl_openib_ignore_locality" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Ignore any locality information and use all devices (0 = use locality informaiton and use only close devices, nonzero = ignore locality information)
      MCA (-) btl openib: informational "btl_openib_have_fork_support" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Whether the OpenFabrics stack supports applications that invoke the "fork()" system call or not (0 = no, 1 = yes). Note that this value does NOT indicate whether the system being run on supports "fork()" with OpenFabrics applications or not.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_cuda_async_send" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Enable or disable CUDA async send copies (true = async; false = sync)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_cuda_async_recv" (current value: "false", data source: environment, level: 9 dev/all, type: bool)
                          Enable or disable CUDA async recv copies (true = async; false = sync)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: informational "btl_openib_have_cuda_gdr" (current value: "true", data source: default, level: 5 tuner/detail, type: bool)
                          Whether CUDA GPU Direct RDMA support is built into library or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: informational "btl_openib_have_driver_gdr" (current value: "true", data source: default, level: 5 tuner/detail, type: bool)
                          Whether Infiniband driver has GPU Direct RDMA support
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_want_cuda_gdr" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable or disable CUDA GPU Direct RDMA support (true = enabled; false = disabled)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_exclusivity" (current value: "1024", data source: default, level: 7 dev/basic, type: unsigned_int)
                          BTL exclusivity (must be >= 0)
      MCA (-) btl openib: parameter "btl_openib_flags" (current value: "send,put,get,fetching-atomics,cuda-async-send,need-ack,need-csum,hetero-rdma", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL bit flags (general flags: send, put, get, in-place, hetero-rdma, atomics, fetching-atomics)
                          Valid values: Comma-delimited list of:  0x1:"send", 0x2:"put", 0x4:"get", 0x8:"inplace", 0x4000:"signaled", 0x8000:"atomics", 0x10000:"fetching-atomics", 0x20000:"static", 0x400:"cuda-put", 0x800:"cuda-get", 0x1000:"cuda-async-send", 0x2000:"cuda-async-recv", 0x200:"failover", 0x10:"need-ack", 0x20:"need-csum", 0x100:"hetero-rdma", 0x80000:"rdma-flush"
      MCA (-) btl openib: informational "btl_openib_atomic_flags" (current value: "add,compare-and-swap", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL atomic support flags
                          Valid values: Comma-delimited list of:  0x1:"add", 0x200:"and", 0x400:"or", 0x800:"xor", 0x1000:"land", 0x2000:"lor", 0x4000:"lxor", 0x10000:"swap", 0x100000:"min", 0x200000:"max", 0x10000000:"compare-and-swap", 0x20000000:"global"
      MCA (-) btl openib: parameter "btl_openib_rndv_eager_limit" (current value: "12288", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
      MCA (-) btl openib: parameter "btl_openib_eager_limit" (current value: "12288", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
      MCA (-) btl openib: parameter "btl_openib_get_limit" (current value: "18446744073709551615", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) for btl get
      MCA (-) btl openib: parameter "btl_openib_get_alignment" (current value: "0", data source: default, level: 6 tuner/all, type: size_t)
                          Alignment required for btl get
      MCA (-) btl openib: parameter "btl_openib_put_limit" (current value: "18446744073709551615", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) for btl put
      MCA (-) btl openib: parameter "btl_openib_put_alignment" (current value: "0", data source: default, level: 6 tuner/all, type: size_t)
                          Alignment required for btl put
      MCA (-) btl openib: parameter "btl_openib_cuda_eager_limit" (current value: "0", data source: default, level: 5 tuner/detail, type: size_t)
                          Maximum size (in bytes, including header) of "GPU short" messages (must be >= 1).
      MCA (-) btl openib: parameter "btl_openib_cuda_rdma_limit" (current value: "18446744073709551615", data source: default, level: 5 tuner/detail, type: size_t)
                          Size (in bytes, including header) of GPU buffer when switch to rndv protocol and pipeline.
      MCA (-) btl openib: parameter "btl_openib_cuda_max_send_size" (current value: "0", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single GPU "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1) (only valid on smcuda btl)
      MCA (-) btl openib: parameter "btl_openib_max_send_size" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
      MCA (-) btl openib: parameter "btl_openib_rdma_pipeline_send_length" (current value: "1048576", data source: default, level: 4 tuner/basic, type: size_t)
                          Length of the "phase 2" portion of a large message (in bytes) when using the pipeline protocol.  This part of the message will be split into fragments of size max_send_size and sent using send/receive semantics (must be >= 0; only relevant when the PUT flag is set)
      MCA (-) btl openib: parameter "btl_openib_rdma_pipeline_frag_size" (current value: "1048576", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 3" fragment from a long message when using the pipeline protocol.  These fragments will be sent using RDMA semantics (must be >= 1; only relevant when the PUT flag is set)
      MCA (-) btl openib: parameter "btl_openib_min_rdma_pipeline_size" (current value: "1060864", data source: default, level: 4 tuner/basic, type: size_t)
                          Messages smaller than this size (in bytes) will not use the RDMA pipeline protocol.  Instead, they will be split into fragments of max_send_size and sent using send/receive semantics (must be >=0, and is automatically adjusted up to at least (eager_limit+btl_rdma_pipeline_send_length); only relevant when the PUT flag is set)
      MCA (-) btl openib: parameter "btl_openib_latency" (current value: "4", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Approximate latency of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = latency in microseconds)
      MCA (-) btl openib: parameter "btl_openib_bandwidth" (current value: "0", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Approximate maximum bandwidth of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = bandwidth in Mbps)
      MCA (-) btl openib: parameter "btl_openib_receive_queues" (current value: "S,128,256,192,128:S,2048,1024,1008,64:S,12288,1024,1008,64:S,131072,1024,1008,64", data source: default, level: 9 dev/all, type: string)
                          Colon-delimited, comma-delimited list of receive queues: P,4096,8,6,4:P,32768,8,6,4
      MCA (-) btl openib: parameter "btl_openib_if_include" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited list of devices/ports to be used (e.g. "mthca0,mthca1:2"; empty value means to use all ports found).  Mutually exclusive with btl_openib_if_exclude.
      MCA (-) btl openib: parameter "btl_openib_if_exclude" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited list of device/ports to be excluded (empty value means to not exclude any ports).  Mutually exclusive with btl_openib_if_include.
      MCA (-) btl openib: parameter "btl_openib_ipaddr_include" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited list of IP Addresses to be used (e.g. "192.168.1.0/24").  Mutually exclusive with btl_openib_ipaddr_exclude.
      MCA (-) btl openib: parameter "btl_openib_ipaddr_exclude" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited list of IP Addresses to be excluded (e.g. "192.168.1.0/24").  Mutually exclusive with btl_openib_ipaddr_include.
      MCA (-) btl openib: parameter "btl_openib_gid_index" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          GID index to use on verbs device ports
      MCA (-) btl openib: parameter "btl_openib_allow_different_subnets" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Allow connecting processes from different IB subnets.(0 = do not allow; 1 = allow)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_cpc_include" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Method used to select OpenFabrics connections (valid values: rdmacm,udcm)
      MCA (-) btl openib: parameter "btl_openib_cpc_exclude" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Method used to exclude OpenFabrics connections (valid values: rdmacm,udcm)
      MCA (-) btl openib: parameter "btl_openib_connect_rdmacm_priority" (current value: "30", data source: default, level: 9 dev/all, type: int)
                          The selection method priority for rdma_cm
      MCA (-) btl openib: parameter "btl_openib_connect_rdmacm_port" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
                          The selection method port for rdma_cm
      MCA (-) btl openib: parameter "btl_openib_connect_rdmacm_resolve_timeout" (current value: "30000", data source: default, level: 9 dev/all, type: int)
                          The timeout (in miliseconds) for address and route resolution
      MCA (-) btl openib: parameter "btl_openib_connect_rdmacm_retry_count" (current value: "20", data source: default, level: 9 dev/all, type: int)
                          Maximum number of times rdmacm will retry route resolution
      MCA (-) btl openib: parameter "btl_openib_connect_rdmacm_reject_causes_connect_error" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          The drivers for some devices are buggy such that an RDMA REJECT action may result in a CONNECT_ERROR event instead of a REJECTED event.  Setting this MCA parameter to true tells Open MPI to treat CONNECT_ERROR events on connections where a REJECT is expected as a REJECT (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA (-) btl openib: parameter "btl_openib_connect_udcm_priority" (current value: "63", data source: default, level: 9 dev/all, type: int)
                          Priority of the udcm connection method
      MCA (-) btl openib: parameter "btl_openib_connect_udcm_recv_count" (current value: "512", data source: default, level: 9 dev/all, type: int)
                          Number of registered buffers to post
      MCA (-) btl openib: parameter "btl_openib_connect_udcm_timeout" (current value: "500000", data source: default, level: 9 dev/all, type: int)
                          Ack timeout for udcm connection messages
      MCA (-) btl openib: parameter "btl_openib_connect_udcm_max_retry" (current value: "25", data source: default, level: 9 dev/all, type: int)
                          Maximum number of times to retry sending a udcm connection message
            MCA btl self: ---------------------------------------------------
            MCA btl self: parameter "btl_self_free_list_num" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Number of fragments by default
            MCA btl self: parameter "btl_self_free_list_max" (current value: "64", data source: default, level: 9 dev/all, type: int)
                          Maximum number of fragments
            MCA btl self: parameter "btl_self_free_list_inc" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Increment by this number of fragments
            MCA btl self: parameter "btl_self_exclusivity" (current value: "65536", data source: default, level: 7 dev/basic, type: unsigned_int)
                          BTL exclusivity (must be >= 0)
            MCA btl self: parameter "btl_self_flags" (current value: "send,put,get,inplace", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL bit flags (general flags: send, put, get, in-place, hetero-rdma, atomics, fetching-atomics)
                          Valid values: Comma-delimited list of:  0x1:"send", 0x2:"put", 0x4:"get", 0x8:"inplace", 0x4000:"signaled", 0x8000:"atomics", 0x10000:"fetching-atomics", 0x20000:"static", 0x400:"cuda-put", 0x800:"cuda-get", 0x1000:"cuda-async-send", 0x2000:"cuda-async-recv", 0x200:"failover", 0x10:"need-ack", 0x20:"need-csum", 0x100:"hetero-rdma", 0x80000:"rdma-flush"
            MCA btl self: informational "btl_self_atomic_flags" (current value: "", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL atomic support flags
                          Valid values: Comma-delimited list of:  0x1:"add", 0x200:"and", 0x400:"or", 0x800:"xor", 0x1000:"land", 0x2000:"lor", 0x4000:"lxor", 0x10000:"swap", 0x100000:"min", 0x200000:"max", 0x10000000:"compare-and-swap", 0x20000000:"global"
            MCA btl self: parameter "btl_self_rndv_eager_limit" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
            MCA btl self: parameter "btl_self_eager_limit" (current value: "1024", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
            MCA btl self: parameter "btl_self_get_limit" (current value: "18446744073709551615", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) for btl get
            MCA btl self: parameter "btl_self_get_alignment" (current value: "0", data source: default, level: 6 tuner/all, type: size_t)
                          Alignment required for btl get
            MCA btl self: parameter "btl_self_put_limit" (current value: "18446744073709551615", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) for btl put
            MCA btl self: parameter "btl_self_put_alignment" (current value: "0", data source: default, level: 6 tuner/all, type: size_t)
                          Alignment required for btl put
            MCA btl self: parameter "btl_self_cuda_eager_limit" (current value: "0", data source: default, level: 5 tuner/detail, type: size_t)
                          Maximum size (in bytes, including header) of "GPU short" messages (must be >= 1).
            MCA btl self: parameter "btl_self_cuda_rdma_limit" (current value: "18446744073709551615", data source: default, level: 5 tuner/detail, type: size_t)
                          Size (in bytes, including header) of GPU buffer when switch to rndv protocol and pipeline.
            MCA btl self: parameter "btl_self_cuda_max_send_size" (current value: "0", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single GPU "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1) (only valid on smcuda btl)
            MCA btl self: parameter "btl_self_max_send_size" (current value: "16384", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
            MCA btl self: parameter "btl_self_rdma_pipeline_send_length" (current value: "2147483647", data source: default, level: 4 tuner/basic, type: size_t)
                          Length of the "phase 2" portion of a large message (in bytes) when using the pipeline protocol.  This part of the message will be split into fragments of size max_send_size and sent using send/receive semantics (must be >= 0; only relevant when the PUT flag is set)
            MCA btl self: parameter "btl_self_rdma_pipeline_frag_size" (current value: "2147483647", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 3" fragment from a long message when using the pipeline protocol.  These fragments will be sent using RDMA semantics (must be >= 1; only relevant when the PUT flag is set)
            MCA btl self: parameter "btl_self_min_rdma_pipeline_size" (current value: "2147484671", data source: default, level: 4 tuner/basic, type: size_t)
                          Messages smaller than this size (in bytes) will not use the RDMA pipeline protocol.  Instead, they will be split into fragments of max_send_size and sent using send/receive semantics (must be >=0, and is automatically adjusted up to at least (eager_limit+btl_rdma_pipeline_send_length); only relevant when the PUT flag is set)
            MCA btl self: parameter "btl_self_latency" (current value: "0", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Approximate latency of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = latency in microseconds)
            MCA btl self: parameter "btl_self_bandwidth" (current value: "100", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Approximate maximum bandwidth of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = bandwidth in Mbps)
      MCA (-) btl smcuda: ---------------------------------------------------
      MCA (-) btl smcuda: parameter "btl_smcuda_min_size" (current value: "134217728", data source: default, level: 9 dev/all, type: unsigned_long)
                          Minimum size of the common/sm mpool shared memory file
      MCA (-) btl smcuda: parameter "btl_smcuda_free_list_num" (current value: "8", data source: default, level: 5 tuner/detail, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_free_list_max" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_free_list_inc" (current value: "64", data source: default, level: 5 tuner/detail, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_max_procs" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_fifo_size" (current value: "4096", data source: default, level: 4 tuner/basic, type: unsigned_int)
      MCA (-) btl smcuda: parameter "btl_smcuda_num_fifos" (current value: "1", data source: default, level: 4 tuner/basic, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_fifo_lazy_free" (current value: "120", data source: default, level: 5 tuner/detail, type: unsigned_int)
      MCA (-) btl smcuda: parameter "btl_smcuda_sm_extra_procs" (current value: "0", data source: default, level: 9 dev/all, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_allocator" (current value: "bucket", data source: default, level: 9 dev/all, type: string)
                          Name of allocator component to use for btl/smcuda allocations
      MCA (-) btl smcuda: parameter "btl_smcuda_use_cuda_ipc" (current value: "1", data source: default, level: 4 tuner/basic, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_use_cuda_ipc_same_gpu" (current value: "1", data source: default, level: 4 tuner/basic, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_cuda_ipc_verbose" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
      MCA (-) btl smcuda: parameter "btl_smcuda_exclusivity" (current value: "65537", data source: default, level: 7 dev/basic, type: unsigned_int)
                          BTL exclusivity (must be >= 0)
      MCA (-) btl smcuda: parameter "btl_smcuda_flags" (current value: "send", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL bit flags (general flags: send, put, get, in-place, hetero-rdma, atomics, fetching-atomics)
                          Valid values: Comma-delimited list of:  0x1:"send", 0x2:"put", 0x4:"get", 0x8:"inplace", 0x4000:"signaled", 0x8000:"atomics", 0x10000:"fetching-atomics", 0x20000:"static", 0x400:"cuda-put", 0x800:"cuda-get", 0x1000:"cuda-async-send", 0x2000:"cuda-async-recv", 0x200:"failover", 0x10:"need-ack", 0x20:"need-csum", 0x100:"hetero-rdma", 0x80000:"rdma-flush"
      MCA (-) btl smcuda: informational "btl_smcuda_atomic_flags" (current value: "", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL atomic support flags
                          Valid values: Comma-delimited list of:  0x1:"add", 0x200:"and", 0x400:"or", 0x800:"xor", 0x1000:"land", 0x2000:"lor", 0x4000:"lxor", 0x10000:"swap", 0x100000:"min", 0x200000:"max", 0x10000000:"compare-and-swap", 0x20000000:"global"
      MCA (-) btl smcuda: parameter "btl_smcuda_rndv_eager_limit" (current value: "4096", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
      MCA (-) btl smcuda: parameter "btl_smcuda_eager_limit" (current value: "4096", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
      MCA (-) btl smcuda: parameter "btl_smcuda_cuda_eager_limit" (current value: "18446744073709551615", data source: default, level: 5 tuner/detail, type: size_t)
                          Maximum size (in bytes, including header) of "GPU short" messages (must be >= 1).
      MCA (-) btl smcuda: parameter "btl_smcuda_cuda_rdma_limit" (current value: "18446744073709551615", data source: default, level: 5 tuner/detail, type: size_t)
                          Size (in bytes, including header) of GPU buffer when switch to rndv protocol and pipeline.
      MCA (-) btl smcuda: parameter "btl_smcuda_cuda_max_send_size" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single GPU "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1) (only valid on smcuda btl)
      MCA (-) btl smcuda: parameter "btl_smcuda_max_send_size" (current value: "32768", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
         MCA (-) btl tcp: ---------------------------------------------------
         MCA (-) btl tcp: parameter "btl_tcp_links" (current value: "1", data source: default, level: 4 tuner/basic, type: unsigned_int)
         MCA (-) btl tcp: parameter "btl_tcp_if_include" (current value: "", data source: default, level: 1 user/basic, type: string)
                          Comma-delimited list of devices and/or CIDR notation of networks to use for MPI communication (e.g., "eth0,192.168.0.0/16").  Mutually exclusive with btl_tcp_if_exclude.
         MCA (-) btl tcp: parameter "btl_tcp_if_exclude" (current value: "127.0.0.1/8,sppp", data source: default, level: 1 user/basic, type: string)
                          Comma-delimited list of devices and/or CIDR notation of networks to NOT use for MPI communication -- all devices not matching these specifications will be used (e.g., "eth0,192.168.0.0/16").  If set to a non-default value, it is mutually exclusive with btl_tcp_if_include.
         MCA (-) btl tcp: parameter "btl_tcp_free_list_num" (current value: "8", data source: default, level: 5 tuner/detail, type: int)
         MCA (-) btl tcp: parameter "btl_tcp_free_list_max" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
         MCA (-) btl tcp: parameter "btl_tcp_free_list_inc" (current value: "32", data source: default, level: 5 tuner/detail, type: int)
         MCA (-) btl tcp: parameter "btl_tcp_sndbuf" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          The size of the send buffer socket option for each connection.  Modern TCP stacks generally are smarter than a fixed size and in some situations setting a buffer size explicitly can actually lower performance.  0 means the tcp btl will not try to set a send buffer size.
         MCA (-) btl tcp: parameter "btl_tcp_rcvbuf" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          The size of the receive buffer socket option for each connection.  Modern TCP stacks generally are smarter than a fixed size and in some situations setting a buffer size explicitly can actually lower performance.  0 means the tcp btl will not try to set a send buffer size.
         MCA (-) btl tcp: parameter "btl_tcp_endpoint_cache" (current value: "30720", data source: default, level: 4 tuner/basic, type: int)
                          The size of the internal cache for each TCP connection. This cache is used to reduce the number of syscalls, by replacing them with memcpy. Every read will read the expected data plus the amount of the endpoint_cache
         MCA (-) btl tcp: parameter "btl_tcp_use_nagle" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          Whether to use Nagle's algorithm or not (using Nagle's algorithm may increase short message latency)
         MCA (-) btl tcp: parameter "btl_tcp_port_min_v4" (current value: "1024", data source: default, level: 2 user/detail, type: int)
                          The minimum port where the TCP BTL will try to bind (default 1024)
         MCA (-) btl tcp: parameter "btl_tcp_port_range_v4" (current value: "64511", data source: default, level: 2 user/detail, type: int)
                          The number of ports where the TCP BTL will try to bind (default 64511). This parameter together with the port min, define a range of ports where Open MPI will open sockets.
         MCA (-) btl tcp: parameter "btl_tcp_progress_thread" (current value: "0", data source: default, level: 1 user/basic, type: int)
         MCA (-) btl tcp: parameter "btl_tcp_warn_all_unfound_interfaces" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Issue a warning for all unfound interfaces included in if_exclude
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
         MCA (-) btl tcp: parameter "btl_tcp_exclusivity" (current value: "100", data source: default, level: 7 dev/basic, type: unsigned_int)
                          BTL exclusivity (must be >= 0)
         MCA (-) btl tcp: parameter "btl_tcp_flags" (current value: "send,put,inplace,need-ack,need-csum,hetero-rdma", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL bit flags (general flags: send, put, get, in-place, hetero-rdma, atomics, fetching-atomics)
                          Valid values: Comma-delimited list of:  0x1:"send", 0x2:"put", 0x4:"get", 0x8:"inplace", 0x4000:"signaled", 0x8000:"atomics", 0x10000:"fetching-atomics", 0x20000:"static", 0x400:"cuda-put", 0x800:"cuda-get", 0x1000:"cuda-async-send", 0x2000:"cuda-async-recv", 0x200:"failover", 0x10:"need-ack", 0x20:"need-csum", 0x100:"hetero-rdma", 0x80000:"rdma-flush"
         MCA (-) btl tcp: informational "btl_tcp_atomic_flags" (current value: "", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL atomic support flags
                          Valid values: Comma-delimited list of:  0x1:"add", 0x200:"and", 0x400:"or", 0x800:"xor", 0x1000:"land", 0x2000:"lor", 0x4000:"lxor", 0x10000:"swap", 0x100000:"min", 0x200000:"max", 0x10000000:"compare-and-swap", 0x20000000:"global"
         MCA (-) btl tcp: parameter "btl_tcp_rndv_eager_limit" (current value: "65536", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
         MCA (-) btl tcp: parameter "btl_tcp_eager_limit" (current value: "65536", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
         MCA (-) btl tcp: parameter "btl_tcp_put_limit" (current value: "18446744073709551615", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) for btl put
         MCA (-) btl tcp: parameter "btl_tcp_put_alignment" (current value: "0", data source: default, level: 6 tuner/all, type: size_t)
                          Alignment required for btl put
         MCA (-) btl tcp: parameter "btl_tcp_cuda_eager_limit" (current value: "0", data source: default, level: 5 tuner/detail, type: size_t)
                          Maximum size (in bytes, including header) of "GPU short" messages (must be >= 1).
         MCA (-) btl tcp: parameter "btl_tcp_cuda_rdma_limit" (current value: "18446744073709551615", data source: default, level: 5 tuner/detail, type: size_t)
                          Size (in bytes, including header) of GPU buffer when switch to rndv protocol and pipeline.
         MCA (-) btl tcp: parameter "btl_tcp_cuda_max_send_size" (current value: "0", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single GPU "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1) (only valid on smcuda btl)
         MCA (-) btl tcp: parameter "btl_tcp_max_send_size" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
         MCA (-) btl tcp: parameter "btl_tcp_rdma_pipeline_send_length" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Length of the "phase 2" portion of a large message (in bytes) when using the pipeline protocol.  This part of the message will be split into fragments of size max_send_size and sent using send/receive semantics (must be >= 0; only relevant when the PUT flag is set)
         MCA (-) btl tcp: parameter "btl_tcp_rdma_pipeline_frag_size" (current value: "2147482624", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 3" fragment from a long message when using the pipeline protocol.  These fragments will be sent using RDMA semantics (must be >= 1; only relevant when the PUT flag is set)
         MCA (-) btl tcp: parameter "btl_tcp_min_rdma_pipeline_size" (current value: "196608", data source: default, level: 4 tuner/basic, type: size_t)
                          Messages smaller than this size (in bytes) will not use the RDMA pipeline protocol.  Instead, they will be split into fragments of max_send_size and sent using send/receive semantics (must be >=0, and is automatically adjusted up to at least (eager_limit+btl_rdma_pipeline_send_length); only relevant when the PUT flag is set)
         MCA (-) btl tcp: parameter "btl_tcp_latency" (current value: "0", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Approximate latency of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = latency in microseconds)
         MCA (-) btl tcp: parameter "btl_tcp_bandwidth" (current value: "0", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Approximate maximum bandwidth of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = bandwidth in Mbps)
         MCA (-) btl tcp: parameter "btl_tcp_disable_family" (current value: "0", data source: default, level: 2 user/detail, type: int)
       MCA (-) btl vader: ---------------------------------------------------
       MCA (-) btl vader: parameter "btl_vader_free_list_num" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Initial number of fragments to allocate for shared memory communication.
       MCA (-) btl vader: parameter "btl_vader_free_list_max" (current value: "512", data source: default, level: 9 dev/all, type: int)
                          Maximum number of fragments to allocate for shared memory communication.
       MCA (-) btl vader: parameter "btl_vader_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
                          Number of fragments to create on each allocation.
       MCA (-) btl vader: parameter "btl_vader_memcpy_limit" (current value: "524288", data source: default, level: 5 tuner/detail, type: int)
                          Message size to switch from using memove to memcpy. The relative speed of these two routines can vary by size.
       MCA (-) btl vader: parameter "btl_vader_segment_size" (current value: "4194304", data source: default, level: 5 tuner/detail, type: int)
                          Maximum size of all shared memory buffers (default: 4M)
       MCA (-) btl vader: parameter "btl_vader_max_inline_send" (current value: "256", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Maximum size to transfer using copy-in copy-out semantics
       MCA (-) btl vader: parameter "btl_vader_fbox_threshold" (current value: "16", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Number of sends required before an eager send buffer is setup for a peer (default: 16)
       MCA (-) btl vader: parameter "btl_vader_fbox_max" (current value: "32", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Maximum number of eager send buffers to allocate (default: 32)
       MCA (-) btl vader: parameter "btl_vader_fbox_size" (current value: "4096", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Size of per-peer fast transfer buffers (default: 4k)
       MCA (-) btl vader: parameter "btl_vader_single_copy_mechanism" (current value: "cma", data source: default, level: 3 user/all, type: int)
                          Single copy mechanism to use (defaults to best available)
                          Valid values: 1:"cma", 4:"emulated", 3:"none"
       MCA (-) btl vader: parameter "btl_vader_backing_directory" (current value: "/dev/shm", data source: default, level: 3 user/all, type: string)
                          Directory to place backing files for shared memory communication. This directory should be on a local filesystem such as /tmp or /dev/shm (default: (linux) /dev/shm, (others) session directory)
       MCA (-) btl vader: parameter "btl_vader_exclusivity" (current value: "65536", data source: default, level: 7 dev/basic, type: unsigned_int)
                          BTL exclusivity (must be >= 0)
       MCA (-) btl vader: parameter "btl_vader_flags" (current value: "send,put,get,inplace,atomics,fetching-atomics", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          BTL bit flags (general flags: send, put, get, in-place, hetero-rdma, atomics, fetching-atomics)
                          Valid values: Comma-delimited list of:  0x1:"send", 0x2:"put", 0x4:"get", 0x8:"inplace", 0x4000:"signaled", 0x8000:"atomics", 0x10000:"fetching-atomics", 0x20000:"static", 0x400:"cuda-put", 0x800:"cuda-get", 0x1000:"cuda-async-send", 0x2000:"cuda-async-recv", 0x200:"failover", 0x10:"need-ack", 0x20:"need-csum", 0x100:"hetero-rdma", 0x80000:"rdma-flush"
       MCA (-) btl vader: parameter "btl_vader_rndv_eager_limit" (current value: "32768", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
       MCA (-) btl vader: parameter "btl_vader_eager_limit" (current value: "4096", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
       MCA (-) btl vader: parameter "btl_vader_get_limit" (current value: "18446744073709551615", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) for btl get
       MCA (-) btl vader: parameter "btl_vader_get_alignment" (current value: "0", data source: default, level: 6 tuner/all, type: size_t)
                          Alignment required for btl get
       MCA (-) btl vader: parameter "btl_vader_put_limit" (current value: "18446744073709551615", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) for btl put
       MCA (-) btl vader: parameter "btl_vader_put_alignment" (current value: "0", data source: default, level: 6 tuner/all, type: size_t)
                          Alignment required for btl put
       MCA (-) btl vader: parameter "btl_vader_cuda_eager_limit" (current value: "0", data source: default, level: 5 tuner/detail, type: size_t)
                          Maximum size (in bytes, including header) of "GPU short" messages (must be >= 1).
       MCA (-) btl vader: parameter "btl_vader_cuda_rdma_limit" (current value: "18446744073709551615", data source: default, level: 5 tuner/detail, type: size_t)
                          Size (in bytes, including header) of GPU buffer when switch to rndv protocol and pipeline.
       MCA (-) btl vader: parameter "btl_vader_cuda_max_send_size" (current value: "0", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single GPU "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1) (only valid on smcuda btl)
       MCA (-) btl vader: parameter "btl_vader_max_send_size" (current value: "32768", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
       MCA (-) btl vader: parameter "btl_vader_rdma_pipeline_send_length" (current value: "4096", data source: default, level: 4 tuner/basic, type: size_t)
                          Length of the "phase 2" portion of a large message (in bytes) when using the pipeline protocol.  This part of the message will be split into fragments of size max_send_size and sent using send/receive semantics (must be >= 0; only relevant when the PUT flag is set)
       MCA (-) btl vader: parameter "btl_vader_rdma_pipeline_frag_size" (current value: "4096", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 3" fragment from a long message when using the pipeline protocol.  These fragments will be sent using RDMA semantics (must be >= 1; only relevant when the PUT flag is set)
       MCA (-) btl vader: parameter "btl_vader_min_rdma_pipeline_size" (current value: "2147483647", data source: default, level: 4 tuner/basic, type: size_t)
                          Messages smaller than this size (in bytes) will not use the RDMA pipeline protocol.  Instead, they will be split into fragments of max_send_size and sent using send/receive semantics (must be >=0, and is automatically adjusted up to at least (eager_limit+btl_rdma_pipeline_send_length); only relevant when the PUT flag is set)
       MCA (-) btl vader: parameter "btl_vader_latency" (current value: "1", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Approximate latency of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = latency in microseconds)
       MCA (-) btl vader: parameter "btl_vader_bandwidth" (current value: "40000", data source: default, level: 5 tuner/detail, type: unsigned_int)
                          Approximate maximum bandwidth of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = bandwidth in Mbps)
       MCA compress base: ---------------------------------------------------
       MCA compress base: parameter "compress" (current value: "^bzip,gzip", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the compress framework (<none> means use all components that can be found)
       MCA compress base: ---------------------------------------------------
       MCA compress base: parameter "compress_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the compress framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
   MCA (-) compress bzip: ---------------------------------------------------
   MCA (-) compress bzip: parameter "compress_bzip_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the COMPRESS bzip component (default: 10)
   MCA (-) compress bzip: parameter "compress_bzip_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbose level for the COMPRESS bzip component
   MCA (-) compress gzip: ---------------------------------------------------
   MCA (-) compress gzip: parameter "compress_gzip_priority" (current value: "15", data source: default, level: 9 dev/all, type: int)
                          Priority of the COMPRESS gzip component (default: 15)
   MCA (-) compress gzip: parameter "compress_gzip_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbose level for the COMPRESS gzip component
            MCA crs base: ---------------------------------------------------
            MCA crs base: parameter "crs" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the crs framework (<none> means use all components that can be found)
            MCA crs base: ---------------------------------------------------
            MCA crs base: parameter "crs_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the crs framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA crs none: ---------------------------------------------------
            MCA crs none: informational "crs_none_priority" (current value: "1", data source: default, level: 3 user/all, type: int)
                          Priority of the crs none component
            MCA crs none: parameter "crs_none_select_warning" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable warning when the 'none' component is selected when checkpoint/restart functionality is requested.[Default = disabled/no-warning]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA dl base: ---------------------------------------------------
             MCA dl base: parameter "dl" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the dl framework (<none> means use all components that can be found)
             MCA dl base: ---------------------------------------------------
             MCA dl base: parameter "dl_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the dl framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
           MCA dl dlopen: ---------------------------------------------------
           MCA dl dlopen: parameter "dl_dlopen_filename_suffixes" (current value: ".so,.dylib,.dll,.sl", data source: default, level: 5 tuner/detail, type: string)
                          Comma-delimited list of filename suffixes that the dlopen component will try
          MCA event base: ---------------------------------------------------
          MCA event base: parameter "event" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the event framework (<none> means use all components that can be found)
          MCA event base: parameter "opal_event_include" (current value: "poll", data source: default, level: 3 user/all, type: string, synonym of: event_external_event_include)
                          Comma-delimited list of libevent subsystems to use (epoll,poll,select -- available on your platform)
          MCA event base: ---------------------------------------------------
          MCA event base: parameter "event_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the event framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
      MCA event external: ---------------------------------------------------
      MCA event external: parameter "event_external_event_include" (current value: "poll", data source: default, level: 3 user/all, type: string, synonyms: opal_event_include)
                          Comma-delimited list of libevent subsystems to use (epoll,poll,select -- available on your platform)
          MCA hwloc base: ---------------------------------------------------
          MCA hwloc base: parameter "hwloc" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the hwloc framework (<none> means use all components that can be found)
          MCA hwloc base: ---------------------------------------------------
          MCA hwloc base: parameter "hwloc_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the hwloc framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA hwloc base: parameter "hwloc_base_mem_alloc_policy" (current value: "none", data source: default, level: 9 dev/all, type: int)
                          General memory allocations placement policy (this is not memory binding). "none" means that no memory policy is applied. "local_only" means that a process' memory allocations will be restricted to its local NUMA node. If using direct launch, this policy will not be in effect until after MPI_INIT. Note that operating system paging policies are unaffected by this setting. For example, if "local_only" is used and local NUMA node memory is exhausted, a new memory allocation may cause paging.
                          Valid values: 0:"none", 1:"local_only"
          MCA hwloc base: parameter "hwloc_base_mem_bind_failure_action" (current value: "warn", data source: default, level: 9 dev/all, type: int)
                          What Open MPI will do if it explicitly tries to bind memory to a specific NUMA location, and fails.  Note that this is a different case than the general allocation policy described by hwloc_base_alloc_policy.  A value of "silent" means that Open MPI will proceed without comment. A value of "warn" means that Open MPI will warn the first time this happens, but allow the job to continue (possibly with degraded performance).  A value of "error" means that Open MPI will abort the job if this happens.
                          Valid values: 0:"silent", 1:"warn", 2:"error"
          MCA hwloc base: parameter "hwloc_base_binding_policy" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Policy for binding processes. Allowed values: none, hwthread, core, l1cache, l2cache, l3cache, socket, numa, board, cpu-list ("none" is the default when oversubscribed, "core" is the default when np<=2, and "numa" is the default when np>2). Allowed qualifiers: overload-allowed, if-supported, ordered
          MCA hwloc base: parameter "hwloc_base_bind_to_core" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Bind processes to cores
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA hwloc base: parameter "hwloc_base_bind_to_socket" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Bind processes to sockets
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA hwloc base: parameter "hwloc_base_report_bindings" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Report bindings to stderr
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA hwloc base: parameter "hwloc_base_cpu_list" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: hwloc_base_slot_list, hwloc_base_cpu_set)
                          Comma-separated list of ranges specifying logical cpus to be used by these processes [default: none]
          MCA hwloc base: parameter "hwloc_base_slot_list" (current value: "", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: hwloc_base_cpu_list)
                          Comma-separated list of ranges specifying logical cpus to be used by these processes [default: none]
          MCA hwloc base: parameter "hwloc_base_cpu_set" (current value: "", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: hwloc_base_cpu_list)
                          Comma-separated list of ranges specifying logical cpus to be used by these processes [default: none]
          MCA hwloc base: parameter "hwloc_base_use_hwthreads_as_cpus" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Use hardware threads as independent cpus
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA hwloc base: parameter "hwloc_base_topo_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Read local topology from file instead of directly sensing it
             MCA if base: ---------------------------------------------------
             MCA if base: parameter "if" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the if framework (<none> means use all components that can be found)
             MCA if base: ---------------------------------------------------
             MCA if base: parameter "if_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the if framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
             MCA if base: parameter "if_base_do_not_resolve" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, do not attempt to resolve interfaces
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA if base: parameter "if_base_retain_loopback" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, retain loopback interfaces
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
     MCA memchecker base: ---------------------------------------------------
     MCA memchecker base: parameter "memchecker" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the memchecker framework (<none> means use all components that can be found)
     MCA memchecker base: ---------------------------------------------------
     MCA memchecker base: parameter "memchecker_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the memchecker framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
         MCA memcpy base: ---------------------------------------------------
         MCA memcpy base: parameter "memcpy" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the memcpy framework (<none> means use all components that can be found)
         MCA memcpy base: ---------------------------------------------------
         MCA memcpy base: parameter "memcpy_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the memcpy framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
         MCA memory base: ---------------------------------------------------
         MCA memory base: parameter "memory" (current value: "patcher", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the memory framework (<none> means use all components that can be found)
         MCA memory base: ---------------------------------------------------
         MCA memory base: parameter "memory_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the memory framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
      MCA memory patcher: ---------------------------------------------------
      MCA memory patcher: parameter "memory_patcher_priority" (current value: "80", data source: default, level: 5 tuner/detail, type: int)
                          Priority of the patcher memory hook component
          MCA mpool base: ---------------------------------------------------
          MCA mpool base: parameter "mpool" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the mpool framework (<none> means use all components that can be found)
          MCA mpool base: ---------------------------------------------------
          MCA mpool base: parameter "mpool_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the mpool framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
      MCA mpool hugepage: ---------------------------------------------------
      MCA mpool hugepage: parameter "mpool_hugepage_priority" (current value: "50", data source: default, level: 9 dev/all, type: int)
                          Default priority of the hugepage mpool component (default: 50)
      MCA mpool hugepage: parameter "mpool_hugepage_page_size" (current value: "2097152", data source: default, level: 9 dev/all, type: int)
                          Default huge page size of the hugepage mpool component (default: 2M)
      MCA mpool hugepage: performance "mpool_hugepage_bytes_allocated" (type: unsigned_long, class: size)
                          Number of bytes currently allocated in the mpool hugepage component
        MCA patcher base: ---------------------------------------------------
        MCA patcher base: parameter "patcher" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the patcher framework (<none> means use all components that can be found)
        MCA patcher base: ---------------------------------------------------
        MCA patcher base: parameter "patcher_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the patcher framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
   MCA patcher overwrite: ---------------------------------------------------
   MCA patcher overwrite: parameter "patcher_overwrite_priority" (current value: "37", data source: default, level: 5 tuner/detail, type: int)
                          Priority of the overwrite binary patcher component
           MCA pmix base: ---------------------------------------------------
           MCA pmix base: parameter "pmix" (current value: "ext3x", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the pmix framework (<none> means use all components that can be found)
           MCA pmix base: ---------------------------------------------------
           MCA pmix base: parameter "pmix_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the pmix framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
           MCA pmix base: parameter "pmix_base_async_modex" (current value: "true", data source: environment, level: 9 dev/all, type: bool)
                          Use asynchronous modex mode
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA pmix base: parameter "pmix_base_collect_data" (current value: "false", data source: environment, level: 9 dev/all, type: bool)
                          Collect all data during modex
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA pmix base: parameter "pmix_base_exchange_timeout" (current value: "-1", data source: default, level: 3 user/all, type: int)
                          Time (in seconds) to wait for a data exchange to complete
          MCA pmix ext3x: ---------------------------------------------------
          MCA pmix ext3x: parameter "pmix_ext3x_silence_warning" (current value: "false", data source: default, level: 4 tuner/basic, type: bool)
                          Silence warning about PMIX_INSTALL_PREFIX
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA pmix ext3x: parameter "pmix_ext3x_library_version" (current value: "PMIx library version 3.1.3rc1 (embedded in Open MPI)", data source: default, level: 4 tuner/basic, type: string)
                          Version of the underlying PMIx library
       MCA (-) pmix flux: ---------------------------------------------------
       MCA (-) pmix flux: parameter "pmix_flux_priority" (current value: "20", data source: default, level: 9 dev/all, type: int)
                          Priority of the pmix flux component (default: 20)
          MCA pstat base: ---------------------------------------------------
          MCA pstat base: parameter "pstat" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the pstat framework (<none> means use all components that can be found)
          MCA pstat base: ---------------------------------------------------
          MCA pstat base: parameter "pstat_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the pstat framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
         MCA rcache base: ---------------------------------------------------
         MCA rcache base: parameter "rcache" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rcache framework (<none> means use all components that can be found)
         MCA rcache base: ---------------------------------------------------
         MCA rcache base: parameter "rcache_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rcache framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
        MCA rcache grdma: ---------------------------------------------------
        MCA rcache grdma: parameter "rcache_grdma_print_stats" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          print registration cache usage statistics at the end of the run
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA rcache rgpusm: ---------------------------------------------------
       MCA rcache rgpusm: parameter "rcache_rgpusm_rcache_name" (current value: "vma", data source: default, level: 9 dev/all, type: string)
                          The name of the registration cache the rcache should use
       MCA rcache rgpusm: parameter "rcache_rgpusm_rcache_size_limit" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_long_long)
                          the maximum size of registration cache in bytes. 0 is unlimited (default 0)
       MCA rcache rgpusm: parameter "rcache_rgpusm_leave_pinned" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Whether to keep memory handles around or release them when done.
       MCA rcache rgpusm: parameter "rcache_rgpusm_print_stats" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          print pool usage statistics at the end of the run
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA rcache rgpusm: parameter "rcache_rgpusm_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Set level of rcache rgpusm verbosity
       MCA rcache rgpusm: parameter "rcache_rgpusm_empty_cache" (current value: "false", data source: default, level: 5 tuner/detail, type: bool)
                          When set, empty entire registration cache when it is full
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
      MCA reachable base: ---------------------------------------------------
      MCA reachable base: parameter "reachable" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the reachable framework (<none> means use all components that can be found)
      MCA reachable base: ---------------------------------------------------
      MCA reachable base: parameter "reachable_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the reachable framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA shmem base: ---------------------------------------------------
          MCA shmem base: parameter "shmem" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the shmem framework (<none> means use all components that can be found)
          MCA shmem base: ---------------------------------------------------
          MCA shmem base: parameter "shmem_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the shmem framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA shmem mmap: ---------------------------------------------------
          MCA shmem mmap: parameter "shmem_mmap_priority" (current value: "50", data source: default, level: 3 user/all, type: int)
                          Priority for shmem mmap component (default: 50)
          MCA shmem mmap: parameter "shmem_mmap_enable_nfs_warning" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Enable the warning emitted when Open MPI detects that its shared memory backing file is located on a network filesystem (1 = enabled, 0 = disabled).
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA shmem mmap: parameter "shmem_mmap_relocate_backing_file" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Whether to change the default placement of backing files or not (Negative = try to relocate backing files to an area rooted at the path specified by shmem_mmap_backing_file_base_dir, but continue with the default path if the relocation fails, 0 = do not relocate, Positive = same as the negative option, but will fail if the relocation fails.
          MCA shmem mmap: parameter "shmem_mmap_backing_file_base_dir" (current value: "/dev/shm", data source: default, level: 9 dev/all, type: string)
                          Specifies where backing files will be created when shmem_mmap_relocate_backing_file is in use.
         MCA shmem posix: ---------------------------------------------------
         MCA shmem posix: parameter "shmem_posix_priority" (current value: "40", data source: default, level: 3 user/all, type: int)
                          Priority for the shmem posix component (default: 40)
          MCA shmem sysv: ---------------------------------------------------
          MCA shmem sysv: parameter "shmem_sysv_priority" (current value: "30", data source: default, level: 3 user/all, type: int)
                          Priority for the shmem sysv component (default: 30)
          MCA timer base: ---------------------------------------------------
          MCA timer base: parameter "timer" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the timer framework (<none> means use all components that can be found)
          MCA timer base: ---------------------------------------------------
          MCA timer base: parameter "timer_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the timer framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
       MCA timer require: ---------------------------------------------------
       MCA timer require: parameter "timer_require_monotonic" (current value: "true", data source: default, level: 5 tuner/detail, type: bool)
                          Node-level monotonic timer required (default yes)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: ---------------------------------------------------
           MCA orte base: parameter "orte_tmpdir_base" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Base of the session directory tree to be used by all processes
           MCA orte base: parameter "orte_local_tmpdir_base" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Base of the session directory tree to be used by orterun/mpirun
           MCA orte base: parameter "orte_remote_tmpdir_base" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Base of the session directory tree on remote nodes, if required to be different from head node
           MCA orte base: parameter "orte_top_session_dir" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Top of the session directory tree for applications
           MCA orte base: parameter "orte_jobfam_session_dir" (current value: "", data source: default, level: 9 dev/all, type: string)
                          The jobfamily session directory for applications
           MCA orte base: parameter "orte_no_session_dirs" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Prohibited locations for session directories (multiple locations separated by ',', default=NULL)
           MCA orte base: parameter "orte_create_session_dirs" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Create session directories
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_execute_quiet" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Do not output error and help messages
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_report_silent_errors" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Report all errors, including silent ones
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_debug" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Top-level ORTE debug switch (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_debug_verbose" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Verbosity level for ORTE debug messages (default: 1)
           MCA orte base: parameter "orte_debug_daemons_file" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether want stdout/stderr of daemons to go to a file or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_debug_daemons" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to debug the ORTE daemons or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_progress_thread_debug" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Debug level for ORTE progress threads
           MCA orte base: parameter "orte_leave_session_attached" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether applications and/or daemons should leave their sessions attached so that any output can be received - this allows X forwarding without all the attendant debugging output
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_output_debugger_proctable" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether or not to output the debugger proctable after launch (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_debugger_test_daemon" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Name of the executable to be used to simulate a debugger colaunch (relative or absolute path)
           MCA orte base: parameter "orte_debugger_test_attach" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Test debugger colaunch after debugger attachment
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_debugger_check_rate" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Set rate (in secs) for auto-detect of debugger attachment (0 => do not check)
           MCA orte base: parameter "orte_do_not_launch" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Perform all necessary operations to prepare to launch the application, but do not actually launch it
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_daemon_spin" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Have any orteds spin until we can connect a debugger to them
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_daemon_fail" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Have the specified orted fail after init for debugging purposes
           MCA orte base: parameter "orte_daemon_fail_delay" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Have the specified orted fail after specified number of seconds (default: 0 => no delay)
           MCA orte base: parameter "orte_startup_timeout" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Seconds to wait for startup or job launch before declaring failed_to_start (default: 0 => do not check)
           MCA orte base: parameter "orte_base_user_debugger" (current value: "totalview @mpirun@ -a @mpirun_args@ : ddt -n @np@ -start @executable@ @executable_argv@ @single_app@ : fxp @mpirun@ -a @mpirun_args@", data source: default, level: 9 dev/all, type: string)
                          Sequence of user-level debuggers to search for in orterun
           MCA orte base: parameter "orte_default_hostfile" (current value: "/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/etc/openmpi-default-hostfile", data source: default, level: 9 dev/all, type: string)
                          Name of the default hostfile (relative or absolute path, "none" to ignore environmental or default MCA param setting)
           MCA orte base: parameter "orte_default_dash_host" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Default -host setting (specify "none" to ignore environmental or default MCA param setting)
           MCA orte base: parameter "orte_node_regex" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Regular expression defining nodes in the system
           MCA orte base: parameter "orte_keep_fqdn_hostnames" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether or not to keep FQDN hostnames [default: no]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_retain_aliases" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether or not to keep aliases for host names [default: no]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_hostname_cutoff" (current value: "1000", data source: default, level: 3 user/all, type: int)
                          Pass hostnames to all procs when #nodes is less than cutoff [default:1000]
           MCA orte base: parameter "orte_hostname_alias_index" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          If hostname aliases are being retained, which one to use for the debugger proc table [default: 1st alias]
           MCA orte base: parameter "orte_xml_output" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Display all output in XML format (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_tag_output" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Tag all output with [job,rank] (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_xml_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Provide all output in XML format to the specified file
           MCA orte base: parameter "orte_timestamp_output" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Timestamp all application process output (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_show_resolved_nodenames" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Display any node names that are resolved to a different name (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_launch_agent" (current value: "orted", data source: default, level: 9 dev/all, type: string)
                          Command used to start processes on remote nodes (default: orted)
           MCA orte base: parameter "orte_fork_agent" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Command used to fork processes on remote nodes (default: NULL)
           MCA orte base: parameter "orte_allocation_required" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether or not an allocation by a resource manager is required [default: no]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_map_stddiag_to_stderr" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Map output from opal_output to stderr of the local process [default: no]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_map_stddiag_to_stdout" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Map output from opal_output to stdout of the local process [default: no]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_xterm" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Create a new xterm window and display output from the specified ranks there [default: none]
           MCA orte base: parameter "orte_report_launch_progress" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Output a brief periodic report on launch progress [default: no]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_report_events" (current value: "", data source: default, level: 9 dev/all, type: string)
                          URI to which events are to be reported (default: NULL)
           MCA orte base: parameter "orte_enable_recovery" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable recovery from process failure [Default = disabled]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_max_restarts" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Max number of times to restart a failed process
           MCA orte base: parameter "orte_abort_on_non_zero_status" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Abort the job if any process returns a non-zero exit status - no restart in such cases
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_allowed_exit_without_sync" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Process exiting without calling finalize will not trigger job termination
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_report_child_jobs_separately" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Return the exit status of the primary job only
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_stat_history_size" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Number of stat samples to keep
           MCA orte base: parameter "orte_no_vm" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: state_novm_select)
                          Do not build the VM at start to detect topologies
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_max_vm_size" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum size of virtual machine - used to subdivide allocation
           MCA orte base: parameter "orte_set_default_slots" (current value: "cores", data source: default, level: 9 dev/all, type: string)
                          Set the number of slots on nodes that lack such info to the number of specified objects [a number, "cores" (default), "numas", "sockets", "hwthreads" (default if hwthreads_as_cpus is set), or "none" to skip this option]
           MCA orte base: parameter "orte_display_alloc" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: ras_base_display_alloc)
                          Whether to display the allocation after it is determined
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_display_devel_alloc" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: ras_base_display_devel_alloc)
                          Whether to display a developer-detail allocation after it is determined
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_soft_locations" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Treat -host directives as desired, but not required
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_daemon_cores" (current value: "", data source: default, level: 5 tuner/detail, type: string)
                          Restrict the ORTE daemons (including mpirun) to operate on the specified cores (comma-separated list of ranges)
           MCA orte base: parameter "orte_timeout_for_stack_trace" (current value: "30", data source: default, level: 9 dev/all, type: int)
                          Seconds to wait for stack traces to return before terminating the job (<= 0 wait forever)
           MCA orte base: parameter "orte_fwd_mpirun_port" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Forward the port used by mpirun so all daemons will use it
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_enable_instant_on_support" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable PMIx-based instant on launch support (experimental)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "ncuda_per_rank" (current value: "all", data source: default, level: 9 dev/all, type: string)
                          Number of GPUs to assign to each rank from CUDA_VISIBLE_DEVICES
           MCA orte base: parameter "orte_server" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: ess_singleton_server)
                          Server to be used as HNP - [file|FILE]:<filename> or just uri
           MCA orte base: parameter "orte_rsh_agent" (current value: "ssh : rsh", data source: default, level: 2 user/detail, type: string, deprecated, synonym of: plm_rsh_agent)
                          The command used to launch executables on remote nodes (typically either "ssh" or "rsh")
           MCA orte base: parameter "orte_assume_same_shell" (current value: "true", data source: default, level: 2 user/detail, type: bool, synonym of: plm_rsh_assume_same_shell)
                          If set to true, assume that the shell on the remote node is the same as the shell on the local node.  Otherwise, probe for what the remote shell [default: 1]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte base: parameter "orte_rankfile" (current value: "", data source: default, level: 5 tuner/detail, type: string, synonym of: rmaps_rank_file_path)
                          Name of the rankfile to be used for mapping processes (relative or absolute path)
           MCA orte base: ---------------------------------------------------
           MCA orte base: parameter "orte_base_help_aggregate" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          If orte_base_help_aggregate is true, duplicate help messages will be aggregated rather than displayed individually.  This can be helpful for parallel jobs that experience multiple identical failures; rather than print out the same help/failure message N times, display it once with a count of how many processes sent the same message.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA orte coll: ---------------------------------------------------
           MCA orte coll: parameter "orte_coll_transports" (current value: "fabric,ethernet", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of transports to use for ORTE collectives
           MCA orte mgmt: ---------------------------------------------------
           MCA orte mgmt: parameter "orte_mgmt_transports" (current value: "oob", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of transports to use for ORTE management messages
            MCA dfs base: ---------------------------------------------------
            MCA dfs base: parameter "dfs" (current value: "^app,orted,test", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the dfs framework (<none> means use all components that can be found)
            MCA dfs base: ---------------------------------------------------
            MCA dfs base: parameter "dfs_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the dfs framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
       MCA (-) dfs orted: ---------------------------------------------------
       MCA (-) dfs orted: parameter "dfs_orted_num_worker_threads" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Number of worker threads to use for processing file requests
        MCA (-) dfs test: ---------------------------------------------------
        MCA (-) dfs test: parameter "dfs_test_select" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Apps select the test plug-in for the DFS framework
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
         MCA errmgr base: ---------------------------------------------------
         MCA errmgr base: parameter "errmgr" (current value: "default_app", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the errmgr framework (<none> means use all components that can be found)
         MCA errmgr base: ---------------------------------------------------
         MCA errmgr base: parameter "errmgr_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the errmgr framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
  MCA errmgr default_app: ---------------------------------------------------
  MCA errmgr default_app: parameter "errmgr_default_app_priority" (current value: "1000", data source: default, level: 9 dev/all, type: int)
                          Priority of the default_app errmgr component
MCA (-) errmgr default_hnp: ---------------------------------------------------
MCA (-) errmgr default_hnp: parameter "errmgr_default_hnp_priority" (current value: "1000", data source: default, level: 9 dev/all, type: int)
                          Priority of the default_hnp errmgr component
MCA (-) errmgr default_orted: ---------------------------------------------------
MCA (-) errmgr default_orted: parameter "errmgr_default_orted_priority" (current value: "1000", data source: default, level: 9 dev/all, type: int)
                          Priority of the default_orted errmgr component
MCA (-) errmgr default_tool: ---------------------------------------------------
MCA (-) errmgr default_tool: parameter "errmgr_default_tool_priority" (current value: "1000", data source: default, level: 9 dev/all, type: int)
                          Priority of the default_tool errmgr component
            MCA ess base: ---------------------------------------------------
            MCA ess base: parameter "ess" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the ess framework (<none> means use all components that can be found)
            MCA ess base: parameter "orte_ess_jobid" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: ess_base_jobid)
                          Process jobid
            MCA ess base: parameter "orte_ess_vpid" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: ess_base_vpid)
                          Process vpid
            MCA ess base: parameter "orte_ess_num_procs" (current value: "-1", data source: default, level: 9 dev/all, type: int, synonym of: ess_base_num_procs)
                          Used to discover the number of procs in the job
            MCA ess base: ---------------------------------------------------
            MCA ess base: parameter "ess_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the ess framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA ess base: parameter "ess_base_stream_buffering" (current value: "default", data source: default, level: 9 dev/all, type: int)
                          Adjust buffering for stdout/stderr [-1 system default] [0 unbuffered] [1 line buffered] [2 fully buffered] (Default: -1)
                          Valid values: -1:"default", 0:"unbuffered", 1:"line_buffered", 2:"fully_buffered"
            MCA ess base: parameter "ess_base_forward_signals" (current value: "6,10,11,12,14,18,21", data source: environment, level: 4 tuner/basic, type: string, synonyms: ess_hnp_forward_signals)
                          Comma-delimited list of additional signals (names or integers) to forward to application processes ["none" => forward nothing]. Signals provided by default include SIGTSTP, SIGUSR1, SIGUSR2, SIGABRT, SIGALRM, and SIGCONT
             MCA ess hnp: ---------------------------------------------------
             MCA ess hnp: parameter "ess_hnp_forward_signals" (current value: "6,10,11,12,14,18,21", data source: environment, level: 4 tuner/basic, type: string, synonym of: ess_base_forward_signals)
                          Comma-delimited list of additional signals (names or integers) to forward to application processes ["none" => forward nothing]. Signals provided by default include SIGTSTP, SIGUSR1, SIGUSR2, SIGABRT, SIGALRM, and SIGCONT
       MCA ess singleton: ---------------------------------------------------
       MCA ess singleton: parameter "ess_singleton_server" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: orte_server)
                          Server to be used as HNP - [file|FILE]:<filename> or just uri
       MCA ess singleton: parameter "ess_singleton_isolated" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Do not start a supporting daemon as this process will never attempt to spawn
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA ess tool: ---------------------------------------------------
            MCA ess tool: parameter "ess_tool_async_progress" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Setup an async progress thread
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA ess tool: parameter "ess_tool_do_not_connect" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Do not connect to a PMIx server
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA ess tool: parameter "ess_tool_system_server_first" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Look for a system PMIx server first
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA ess tool: parameter "ess_tool_system_server_only" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Only connect to a system server (and not an mpirun)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA ess tool: parameter "ess_tool_wait_to_connect" (current value: "0", data source: default, level: 2 user/detail, type: int)
                          Time in seconds to wait before retrying connection to server
            MCA ess tool: parameter "ess_tool_num_retries" (current value: "0", data source: default, level: 2 user/detail, type: int)
                          Number of times to retry connecting to server
            MCA ess tool: parameter "ess_tool_server_pid" (current value: "0", data source: default, level: 2 user/detail, type: int)
                          PID of the server to which we are to connect
          MCA filem base: ---------------------------------------------------
          MCA filem base: parameter "filem" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the filem framework (<none> means use all components that can be found)
          MCA filem base: ---------------------------------------------------
          MCA filem base: parameter "filem_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the filem framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
           MCA filem raw: ---------------------------------------------------
           MCA filem raw: parameter "filem_raw_flatten_directory_trees" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Put all files in the working directory instead of creating their respective directory trees
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
        MCA grpcomm base: ---------------------------------------------------
        MCA grpcomm base: parameter "grpcomm" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the grpcomm framework (<none> means use all components that can be found)
        MCA grpcomm base: ---------------------------------------------------
        MCA grpcomm base: parameter "grpcomm_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the grpcomm framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
      MCA grpcomm direct: ---------------------------------------------------
      MCA grpcomm direct: parameter "grpcomm_direct_priority" (current value: "85", data source: default, level: 9 dev/all, type: int)
                          Priority of the grpcomm direct component
            MCA iof base: ---------------------------------------------------
            MCA iof base: parameter "iof" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the iof framework (<none> means use all components that can be found)
            MCA iof base: ---------------------------------------------------
            MCA iof base: parameter "iof_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the iof framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA iof base: parameter "iof_base_output_limit" (current value: "2147483647", data source: default, level: 9 dev/all, type: size_t)
                          Maximum backlog of output messages [default: unlimited]
            MCA iof base: parameter "iof_base_redirect_app_stderr_to_stdout" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Redirect application stderr to stdout at source (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA notifier base: ---------------------------------------------------
       MCA notifier base: parameter "notifier" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the notifier framework (<none> means use all components that can be found)
       MCA notifier base: ---------------------------------------------------
       MCA notifier base: parameter "notifier_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the notifier framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
       MCA notifier base: parameter "notifier_base_use_progress_thread" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Use a dedicated progress thread for notifications [default: false]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA notifier base: parameter "notifier_base_severity_level" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report all events at or above this severity [default: error]
       MCA notifier base: parameter "notifier_base_default_actions" (current value: "syslog", data source: default, level: 9 dev/all, type: string)
                          Report all events to the default actions:NONE,syslog,smtp
       MCA notifier base: parameter "notifier_base_emerg_event_actions" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report emergency events to the specified actions: example 'smtp'
       MCA notifier base: parameter "notifier_base_alert_event_actions" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report alert events to the specified actions: example 'smtp'
       MCA notifier base: parameter "notifier_base_crit_event_actions" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report critical events to the specified actions: example 'syslog'
       MCA notifier base: parameter "notifier_base_warn_event_actions" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report warning events to the specified actions: example 'syslog'
       MCA notifier base: parameter "notifier_base_notice_event_actions" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report notice events to the specified actions: example 'syslog'
       MCA notifier base: parameter "notifier_base_info_event_actions" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report info events to the specified actions: example 'syslog'
       MCA notifier base: parameter "notifier_base_debug_event_actions" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report debug events to the specified actions: example 'syslog'
       MCA notifier base: parameter "notifier_base_error_event_actions" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Report error events to the specified actions: example 'syslog'
           MCA odls base: ---------------------------------------------------
           MCA odls base: parameter "odls" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the odls framework (<none> means use all components that can be found)
           MCA odls base: ---------------------------------------------------
           MCA odls base: parameter "odls_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the odls framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
           MCA odls base: parameter "odls_base_sigkill_timeout" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Time to wait for a process to die after issuing a kill signal to it
           MCA odls base: parameter "odls_base_max_threads" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Maximum number of threads to use for spawning local procs
           MCA odls base: parameter "odls_base_num_threads" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Specific number of threads to use for spawning local procs
           MCA odls base: parameter "odls_base_cutoff" (current value: "32", data source: default, level: 9 dev/all, type: int)
                          Minimum number of local procs before using thread pool for spawn
           MCA odls base: parameter "odls_base_signal_direct_children_only" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to restrict signals (e.g., SIGTERM) to direct children, or to apply them as well to any children spawned by those processes
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA oob base: ---------------------------------------------------
            MCA oob base: parameter "oob" (current value: "^ud", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the oob framework (<none> means use all components that can be found)
            MCA oob base: ---------------------------------------------------
            MCA oob base: parameter "oob_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the oob framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA oob base: parameter "oob_base_num_progress_threads" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Number of independent progress OOB messages for each interface
             MCA oob tcp: ---------------------------------------------------
             MCA oob tcp: parameter "oob_tcp_peer_limit" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                          Maximum number of peer connections to simultaneously maintain (-1 = infinite)
             MCA oob tcp: parameter "oob_tcp_peer_retries" (current value: "2", data source: default, level: 5 tuner/detail, type: int)
                          Number of times to try shutting down a connection before giving up
             MCA oob tcp: parameter "oob_tcp_sndbuf" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          TCP socket send buffering size (in bytes, 0 => leave system default)
             MCA oob tcp: parameter "oob_tcp_rcvbuf" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          TCP socket receive buffering size (in bytes, 0 => leave system default)
             MCA oob tcp: parameter "oob_tcp_if_include" (current value: "", data source: default, level: 2 user/detail, type: string, synonyms: oob_tcp_include)
                          Comma-delimited list of devices and/or CIDR notation of TCP networks to use for Open MPI bootstrap communication (e.g., "eth0,192.168.0.0/16").  Mutually exclusive with oob_tcp_if_exclude.
             MCA oob tcp: parameter "oob_tcp_if_exclude" (current value: "", data source: default, level: 2 user/detail, type: string, synonyms: oob_tcp_exclude)
                          Comma-delimited list of devices and/or CIDR notation of TCP networks to NOT use for Open MPI bootstrap communication -- all devices not matching these specifications will be used (e.g., "eth0,192.168.0.0/16").  If set to a non-default value, it is mutually exclusive with oob_tcp_if_include.
             MCA oob tcp: parameter "oob_tcp_static_ipv4_ports" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Static ports for daemons and procs (IPv4)
             MCA oob tcp: parameter "oob_tcp_dynamic_ipv4_ports" (current value: "", data source: default, level: 4 tuner/basic, type: string)
                          Range of ports to be dynamically used by daemons and procs (IPv4)
             MCA oob tcp: parameter "oob_tcp_disable_ipv4_family" (current value: "false", data source: default, level: 4 tuner/basic, type: bool)
                          Disable the IPv4 interfaces
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA oob tcp: parameter "oob_tcp_keepalive_time" (current value: "300", data source: default, level: 5 tuner/detail, type: int)
                          Idle time in seconds before starting to send keepalives (keepalive_time <= 0 disables keepalive functionality)
             MCA oob tcp: parameter "oob_tcp_keepalive_intvl" (current value: "20", data source: default, level: 5 tuner/detail, type: int)
                          Time between successive keepalive pings when peer has not responded, in seconds (ignored if keepalive_time <= 0)
             MCA oob tcp: parameter "oob_tcp_keepalive_probes" (current value: "9", data source: default, level: 5 tuner/detail, type: int)
                          Number of keepalives that can be missed before declaring error (ignored if keepalive_time <= 0)
             MCA oob tcp: parameter "oob_tcp_retry_delay" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          Time (in sec) to wait before trying to connect to peer again
             MCA oob tcp: parameter "oob_tcp_max_recon_attempts" (current value: "10", data source: default, level: 4 tuner/basic, type: int)
                          Max number of times to attempt connection before giving up (-1 -> never give up)
            MCA plm base: ---------------------------------------------------
            MCA plm base: parameter "plm" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the plm framework (<none> means use all components that can be found)
            MCA plm base: ---------------------------------------------------
            MCA plm base: parameter "plm_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the plm framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
             MCA plm lsf: ---------------------------------------------------
             MCA plm lsf: parameter "plm_lsf_csm_uses_blaunch" (current value: "false", data source: default, level: 5 tuner/detail, type: bool)
                          Use blaunch even in the presence of CSM
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: ---------------------------------------------------
             MCA plm rsh: parameter "plm_rsh_num_concurrent" (current value: "128", data source: default, level: 5 tuner/detail, type: int)
                          How many plm_rsh_agent instances to invoke concurrently (must be > 0)
             MCA plm rsh: parameter "plm_rsh_force_rsh" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Force the launcher to always use rsh
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: parameter "plm_rsh_disable_qrsh" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Disable the use of qrsh when under the Grid Engine parallel environment
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: parameter "plm_rsh_daemonize_qrsh" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Daemonize the orted under the Grid Engine parallel environment
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: parameter "plm_rsh_disable_llspawn" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Disable the use of llspawn when under the LoadLeveler environment
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: parameter "plm_rsh_daemonize_llspawn" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Daemonize the orted when under the LoadLeveler environment
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: parameter "plm_rsh_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the rsh plm component
             MCA plm rsh: parameter "plm_rsh_delay" (current value: "", data source: default, level: 4 tuner/basic, type: string)
                          Delay between invocations of the remote agent (sec[:usec])
             MCA plm rsh: parameter "plm_rsh_no_tree_spawn" (current value: "false", data source: default, level: 5 tuner/detail, type: bool)
                          If set to true, do not launch via a tree-based topology
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: parameter "plm_rsh_agent" (current value: "ssh : rsh", data source: default, level: 2 user/detail, type: string, synonyms: pls_rsh_agent, orte_rsh_agent)
                          The command used to launch executables on remote nodes (typically either "ssh" or "rsh")
             MCA plm rsh: parameter "plm_rsh_assume_same_shell" (current value: "true", data source: default, level: 2 user/detail, type: bool, synonyms: orte_assume_same_shell)
                          If set to true, assume that the shell on the remote node is the same as the shell on the local node.  Otherwise, probe for what the remote shell [default: 1]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: parameter "plm_rsh_pass_environ_mca_params" (current value: "true", data source: default, level: 2 user/detail, type: bool)
                          If set to false, do not include mca params from the environment on the orted cmd line
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
             MCA plm rsh: parameter "plm_rsh_args" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Arguments to add to rsh/ssh
             MCA plm rsh: parameter "plm_rsh_pass_libpath" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Prepend the specified library path to the remote shell's LD_LIBRARY_PATH
             MCA plm rsh: parameter "plm_rsh_use_cat" (current value: "true", data source: default, level: 2 user/detail, type: bool)
                          pipe output of rsh/ssh to a cat process so that output is not lost
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA ras base: ---------------------------------------------------
            MCA ras base: parameter "ras" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the ras framework (<none> means use all components that can be found)
            MCA ras base: ---------------------------------------------------
            MCA ras base: parameter "ras_base_display_alloc" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: orte_display_alloc)
                          Whether to display the allocation after it is determined
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA ras base: parameter "ras_base_display_devel_alloc" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: orte_display_devel_alloc)
                          Whether to display a developer-detail allocation after it is determined
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA ras base: parameter "ras_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the ras framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA ras base: parameter "ras_base_multiplier" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Simulate a larger cluster by launching N daemons/node
            MCA ras base: parameter "ras_base_launch_orted_on_hn" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Launch an orte daemon on the head node
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA ras simulator: ---------------------------------------------------
       MCA ras simulator: parameter "ras_simulator_slots" (current value: "1", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of number of slots on each node to simulate
       MCA ras simulator: parameter "ras_simulator_max_slots" (current value: "0", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of number of max slots on each node to simulate
       MCA ras simulator: parameter "ras_simulator_num_nodes" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of number of nodes to simulate for each topology
       MCA ras simulator: parameter "ras_simulator_topo_files" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of files containing xml topology descriptions for simulated nodes
       MCA ras simulator: parameter "ras_simulator_topologies" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of topology descriptions for simulated nodes
       MCA ras simulator: parameter "ras_simulator_have_cpubind" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Topology supports binding to cpus
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA ras simulator: parameter "ras_simulator_have_membind" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Topology supports binding to memory
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA regx base: ---------------------------------------------------
           MCA regx base: parameter "regx" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the regx framework (<none> means use all components that can be found)
           MCA regx base: ---------------------------------------------------
           MCA regx base: parameter "regx_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the regx framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA rmaps base: ---------------------------------------------------
          MCA rmaps base: parameter "rmaps" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rmaps framework (<none> means use all components that can be found)
          MCA rmaps base: parameter "rmaps_dist_device" (current value: "", data source: default, level: 9 dev/all, type: string)
                          If specified, map processes near to this device. Any device name that is identified by the lstopo hwloc utility as Net or OpenFabrics (for example eth0, mlx4_0, etc) or special name as auto
          MCA rmaps base: ---------------------------------------------------
          MCA rmaps base: parameter "rmaps_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rmaps framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA rmaps base: parameter "rmaps_base_pernode" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: rmaps_ppr_pernode)
                          Launch one ppn as directed
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_n_pernode" (current value: "0", data source: default, level: 9 dev/all, type: int, synonyms: rmaps_ppr_n_pernode)
                          Launch n procs/node
          MCA rmaps base: parameter "rmaps_base_n_persocket" (current value: "0", data source: default, level: 9 dev/all, type: int, synonyms: rmaps_ppr_n_persocket)
                          Launch n procs/socket
          MCA rmaps base: parameter "rmaps_base_pattern" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: rmaps_ppr_pattern)
                          Comma-separated list of number of processes on a given resource type [default: none]
          MCA rmaps base: parameter "rmaps_base_mapping_policy" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: rmaps_base_schedule_policy)
                          Mapping Policy [slot | hwthread | core (default:np<=2) | l1cache | l2cache | l3cache | socket (default:np>2) | numa | board | node | seq | dist | ppr], with allowed modifiers :PE=y,SPAN,OVERSUBSCRIBE,NOOVERSUBSCRIBE
          MCA rmaps base: parameter "rmaps_base_schedule_policy" (current value: "", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: rmaps_base_mapping_policy)
                          Mapping Policy [slot | hwthread | core (default:np<=2) | l1cache | l2cache | l3cache | socket (default:np>2) | numa | board | node | seq | dist | ppr], with allowed modifiers :PE=y,SPAN,OVERSUBSCRIBE,NOOVERSUBSCRIBE
          MCA rmaps base: parameter "rmaps_base_ranking_policy" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Ranking Policy [slot (default:np<=2) | hwthread | core | l1cache | l2cache | l3cache | socket (default:np>2) | numa | board | node], with modifier :SPAN or :FILL
          MCA rmaps base: parameter "rmaps_base_bycore" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to map and rank processes round-robin by core
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_byslot" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to map and rank processes round-robin by slot
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_bynode" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to map and rank processes round-robin by node
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_cpus_per_proc" (current value: "0", data source: default, level: 9 dev/all, type: int, synonyms: rmaps_base_cpus_per_rank)
                          Number of cpus to use for each rank [1-2**15 (default=1)]
          MCA rmaps base: parameter "rmaps_base_cpus_per_rank" (current value: "0", data source: default, level: 9 dev/all, type: int, synonym of: rmaps_base_cpus_per_proc)
                          Number of cpus to use for each rank [1-2**15 (default=1)]
          MCA rmaps base: parameter "rmaps_base_no_schedule_local" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If false, allow scheduling MPI applications on the same node as mpirun (default).  If true, do not schedule any MPI applications on the same node as mpirun
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_no_oversubscribe" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If true, then do not allow oversubscription of nodes - mpirun will return an error if there aren't enough nodes to launch all processes without oversubscribing
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_oversubscribe" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If true, then allow oversubscription of nodes and overloading of processing elements
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_display_map" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to display the process map after it is computed
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_display_devel_map" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to display a developer-detail process map after it is computed
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_display_topo_with_map" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to display the topology with the map
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_display_diffable_map" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to display a diffable process map after it is computed
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA rmaps base: parameter "rmaps_base_topology" (current value: "", data source: default, level: 9 dev/all, type: string)
                          hwloc topology file (xml format) describing the topology of the compute nodes [default: none]
          MCA rmaps base: parameter "rmaps_base_inherit" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether child jobs shall inherit launch directives
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA rmaps ppr: ---------------------------------------------------
           MCA rmaps ppr: parameter "rmaps_ppr_pernode" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonym of: rmaps_base_pernode)
                          Launch one ppn as directed
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA rmaps ppr: parameter "rmaps_ppr_n_pernode" (current value: "0", data source: default, level: 9 dev/all, type: int, synonym of: rmaps_base_n_pernode)
                          Launch n procs/node
           MCA rmaps ppr: parameter "rmaps_ppr_n_persocket" (current value: "0", data source: default, level: 9 dev/all, type: int, synonym of: rmaps_base_n_persocket)
                          Launch n procs/socket
           MCA rmaps ppr: parameter "rmaps_ppr_pattern" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: rmaps_base_pattern)
                          Comma-separated list of number of processes on a given resource type [default: none]
           MCA rmaps ppr: parameter "rmaps_ppr_priority" (current value: "90", data source: default, level: 9 dev/all, type: int)
                          Priority of the ppr rmaps component
       MCA rmaps mindist: ---------------------------------------------------
       MCA rmaps mindist: parameter "rmaps_mindist_priority" (current value: "20", data source: default, level: 9 dev/all, type: int)
                          Priority of the mindist rmaps component
     MCA rmaps rank_file: ---------------------------------------------------
     MCA rmaps rank_file: parameter "rmaps_rank_file_priority" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Priority of the rank_file rmaps component
     MCA rmaps rank_file: parameter "rmaps_rank_file_path" (current value: "", data source: default, level: 5 tuner/detail, type: string, synonyms: orte_rankfile)
                          Name of the rankfile to be used for mapping processes (relative or absolute path)
     MCA rmaps rank_file: parameter "rmaps_rank_file_physical" (current value: "false", data source: default, level: 5 tuner/detail, type: bool)
                          Rankfile contains physical cpu designations
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
     MCA rmaps resilient: ---------------------------------------------------
     MCA rmaps resilient: parameter "rmaps_resilient_priority" (current value: "40", data source: default, level: 9 dev/all, type: int)
                          Priority of the resilient rmaps component
     MCA rmaps resilient: parameter "rmaps_resilient_fault_grp_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Filename that contains a description of fault groups for this system
   MCA rmaps round_robin: ---------------------------------------------------
   MCA rmaps round_robin: parameter "rmaps_round_robin_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the rr rmaps component
           MCA rmaps seq: ---------------------------------------------------
           MCA rmaps seq: parameter "rmaps_seq_priority" (current value: "60", data source: default, level: 9 dev/all, type: int)
                          Priority of the seq rmaps component
            MCA rml base: ---------------------------------------------------
            MCA rml base: parameter "rml" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rml framework (<none> means use all components that can be found)
            MCA rml base: ---------------------------------------------------
            MCA rml base: parameter "rml_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rml framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA rml base: parameter "rml_base_max_retries" (current value: "3", data source: default, level: 9 dev/all, type: int)
                          Max #times to retry sending a message
         MCA routed base: ---------------------------------------------------
         MCA routed base: parameter "routed" (current value: "^direct,radix,debruijn,binomial", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the routed framework (<none> means use all components that can be found)
         MCA routed base: ---------------------------------------------------
         MCA routed base: parameter "routed_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the routed framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
    MCA (-) routed radix: ---------------------------------------------------
    MCA (-) routed radix: parameter "routed_radix" (current value: "64", data source: default, level: 9 dev/all, type: int)
                          Radix to be used for routed radix tree
            MCA rtc base: ---------------------------------------------------
            MCA rtc base: parameter "rtc" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rtc framework (<none> means use all components that can be found)
            MCA rtc base: ---------------------------------------------------
            MCA rtc base: parameter "rtc_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rtc framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
           MCA rtc hwloc: ---------------------------------------------------
           MCA rtc hwloc: parameter "rtc_hwloc_priority" (current value: "70", data source: default, level: 9 dev/all, type: int)
                          Priority of the HWLOC rtc component
           MCA rtc hwloc: parameter "rtc_hwloc_vmhole" (current value: "biggest", data source: default, level: 9 dev/all, type: string)
                          Kind of VM hole to identify - none, begin, biggest, libs, heap, stack (default=biggest)
         MCA schizo base: ---------------------------------------------------
         MCA schizo base: parameter "schizo" (current value: "jsm", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the schizo framework (<none> means use all components that can be found)
         MCA schizo base: ---------------------------------------------------
         MCA schizo base: parameter "schizo_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the schizo framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
         MCA schizo base: parameter "schizo_base_personalities" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of personalities
     MCA (-) schizo ompi: ---------------------------------------------------
     MCA (-) schizo ompi: parameter "schizo_ompi_prepend_ld_library_path" (current value: "pami_port", data source: environment, level: 9 dev/all, type: string)
                          Path to prepend to proc's ld_library_path
          MCA snapc base: ---------------------------------------------------
          MCA snapc base: parameter "snapc" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the snapc framework (<none> means use all components that can be found)
          MCA snapc base: ---------------------------------------------------
          MCA snapc base: parameter "snapc_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the snapc framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA snapc base: parameter "snapc_base_only_one_seq" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Only store the most recent checkpoint sequence. [Default = disabled]
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA snapc base: parameter "snapc_base_global_snapshot_dir" (current value: "/g/g14/bienz1", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: sstore_base_global_snapshot_dir)
                          The base directory to use when storing global snapshots
          MCA snapc base: parameter "snapc_base_global_snapshot_ref" (current value: "", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: sstore_base_global_snapshot_ref)
                          The global snapshot reference to be used for this job.  [Default = ompi_global_snapshot_MPIRUNPID.ckpt]
         MCA sstore base: ---------------------------------------------------
         MCA sstore base: parameter "sstore" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the sstore framework (<none> means use all components that can be found)
         MCA sstore base: ---------------------------------------------------
         MCA sstore base: parameter "sstore_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the sstore framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
         MCA sstore base: parameter "sstore_base_global_snapshot_dir" (current value: "/g/g14/bienz1", data source: default, level: 9 dev/all, type: string, synonyms: snapc_base_global_snapshot_dir)
                          The base directory to use when storing global snapshots
         MCA sstore base: parameter "sstore_base_global_snapshot_ref" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: snapc_base_global_snapshot_ref)
                          The global snapshot reference to be used for this job.  [Default = ompi_global_snapshot_MPIRUNPID.ckpt]
          MCA state base: ---------------------------------------------------
          MCA state base: parameter "state" (current value: "app", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the state framework (<none> means use all components that can be found)
      MCA (-) state novm: ---------------------------------------------------
      MCA (-) state novm: parameter "state_novm_select" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: orte_no_vm)
                          Do not build the VM at start to detect topologies
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA state base: ---------------------------------------------------
          MCA state base: parameter "state_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the state framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA state base: parameter "state_base_check_fds" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Daemons should check fds for leaks after each job completes
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: ---------------------------------------------------
            MCA mpi base: parameter "mpi_leave_pinned" (current value: "true", data source: environment, level: 9 dev/all, type: int, synonyms: opal_leave_pinned)
                          Whether to use the "leave pinned" protocol or not.  Enabling this setting can help bandwidth performance when repeatedly sending and receiving large messages with the same buffers over RDMA-based networks (false = do not use "leave pinned" protocol, true = use "leave pinned" protocol, auto = allow network to choose at runtime).
                          Valid values: -1: auto, 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_leave_pinned_pipeline" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: opal_leave_pinned_pipeline)
                          Whether to use the "leave pinned pipeline" protocol or not.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_warn_on_fork" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, issue a warning if program forks under conditions that could cause system errors
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_restrict_libs" (current value: "", data source: default, level: 9 dev/all, type: string)
                          restrict which MCAs will be loaded
            MCA mpi base: parameter "mpi_restrict_libs_nl" (current value: "", data source: default, level: 9 dev/all, type: string)
                          list which MCAs use libnl
            MCA mpi base: parameter "mpi_restrict_libs_nl3" (current value: "", data source: default, level: 9 dev/all, type: string)
                          list which MCAs use libnl-3
            MCA mpi base: parameter "mpi_param_check" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Whether you want MPI API parameters checked at run-time or not.  Possible values are 0 (no checking) and 1 (perform checking at run-time)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_yield_when_idle" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Yield the processor when waiting for MPI communication (for MPI processes, will default to 1 when oversubscribing nodes)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_event_tick_rate" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          How often to progress TCP communications (0 = never, otherwise specified in microseconds)
            MCA mpi base: parameter "mpi_show_handle_leaks" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether MPI_FINALIZE shows all MPI handles that were not freed or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_no_free_handles" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to actually free MPI objects when their handles are freed
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_show_mpi_alloc_mem_leaks" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          If >0, MPI_FINALIZE will show up to this many instances of memory allocated by MPI_ALLOC_MEM that was not freed by MPI_FREE_MEM
            MCA mpi base: parameter "mpi_show_mca_params" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Whether to show all MCA parameter values during MPI_INIT or not (good for reproducability of MPI jobs for debug purposes). Accepted values are all, default, file, api, and enviro - or a comma delimited combination of them
            MCA mpi base: parameter "mpi_show_mca_params_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          If mpi_show_mca_params is true, setting this string to a valid filename tells IBM Spectrum MPI to dump all the MCA parameter values into a file suitable for reading via the mca_param_files parameter (good for reproducability of MPI jobs)
            MCA mpi base: parameter "mpi_preconnect_all" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: mpi_preconnect_mpi)
                          Whether to force MPI processes to fully wire-up the MPI connections between MPI processes during MPI_INIT (vs. making connections lazily -- upon the first MPI traffic between each process peer pair)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: informational "mpi_have_sparse_group_storage" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether this IBM Spectrum MPI installation supports storing of data in MPI groups in "sparse" formats (good for extremely large process count MPI jobs that create many communicators/groups)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: informational "mpi_use_sparse_group_storage" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to use "sparse" storage formats for MPI groups (only relevant if mpi_have_sparse_group_storage is 1)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_cuda_support" (current value: "true", data source: default, level: 3 user/all, type: bool, deprecated, synonym of: opal_cuda_support)
                          Whether CUDA GPU buffer support is enabled or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_built_with_cuda_support" (current value: "true", data source: default, level: 4 tuner/basic, type: bool, synonym of: opal_built_with_cuda_support)
                          Whether CUDA GPU buffer support is built into library or not
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_add_procs_cutoff" (current value: "0", data source: default, level: 3 user/all, type: unsigned_int)
                          Maximum world size for pre-allocating resources for all remote processes. Increasing this limit may improve communication performance at the cost of memory usage
            MCA mpi base: parameter "mpi_dynamics_enabled" (current value: "true", data source: default, level: 4 tuner/basic, type: bool)
                          Is the MPI dynamic process functionality enabled (e.g., MPI_COMM_SPAWN)?  Default is yes, but certain transports and/or environments may disable it.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_abort_delay" (current value: "0", data source: default, level: 5 tuner/detail, type: int, deprecated, synonym of: opal_abort_delay)
                          If nonzero, print out an identifying message when abort operation is invoked (hostname, PID of the process that called abort) and delay for that many seconds before exiting (a negative delay value means to never abort).  This allows attaching of a debugger before quitting the job.
            MCA mpi base: parameter "mpi_abort_print_stack" (current value: "false", data source: default, level: 5 tuner/detail, type: bool, deprecated, synonym of: opal_abort_print_stack)
                          If nonzero, print out a stack trace when abort is invoked
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_spc_attach" (current value: "", data source: default, level: 4 tuner/basic, type: string)
                          A comma delimeted string listing the software-based performance counters (SPCs) to enable.
            MCA mpi base: parameter "mpi_spc_dump_enabled" (current value: "false", data source: default, level: 4 tuner/basic, type: bool)
                          A boolean value for whether (true) or not (false) to enable dumping SPC counters in MPI_Finalize.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA mpi base: parameter "mpi_fortcall" (current value: "PMPI", data source: default, level: 9 dev/all, type: string)
                          Whether Fortran wrappers should call MPI or PMPI (default). The former allows language wrapping for the profiling interface. Possible values are the strings MPI or PMPI.
            MCA mpi base: parameter "mpi_gpu_hook_verbose" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If GPU buffers are seen in use in OMPI, print a message on first occurrence. This could be used to detect whether an application needs the -gpu feature turned on or not.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
     MCA mpi common_cuda: ---------------------------------------------------
     MCA mpi common_cuda: parameter "mpi_common_cuda_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Set level of common cuda verbosity
     MCA mpi common_cuda: parameter "mpi_common_cuda_register_memory" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Whether to cuMemHostRegister preallocated BTL buffers
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
     MCA mpi common_cuda: parameter "mpi_common_cuda_warning" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Whether to print warnings when CUDA registration fails
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
     MCA mpi common_cuda: parameter "mpi_common_cuda_memcpy_async" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Set to 0 to force CUDA sync copy instead of async
     MCA mpi common_cuda: parameter "mpi_common_cuda_event_max" (current value: "400", data source: default, level: 9 dev/all, type: int)
                          Set number of oustanding CUDA events
     MCA mpi common_cuda: parameter "mpi_common_cuda_cumemcpy_async" (current value: "1", data source: default, level: 5 tuner/detail, type: int)
                          Set to 0 to force CUDA cuMemcpy instead of cuMemcpyAsync/cuStreamSynchronize
     MCA mpi common_cuda: parameter "mpi_common_cuda_gpu_mem_check_workaround" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Set to 0 to disable GPU memory check workaround. A user would rarely have to do this.
            MCA bml base: ---------------------------------------------------
            MCA bml base: parameter "bml" (current value: "^r2", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the bml framework (<none> means use all components that can be found)
            MCA bml base: ---------------------------------------------------
            MCA bml base: parameter "bml_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the bml framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA (-) bml r2: ---------------------------------------------------
          MCA (-) bml r2: parameter "bml_r2_show_unreach_errors" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Show error message when procs are unreachable
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA coll base: ---------------------------------------------------
           MCA coll base: parameter "coll" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the coll framework (<none> means use all components that can be found)
           MCA coll base: ---------------------------------------------------
           MCA coll base: parameter "coll_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the coll framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA coll basic: ---------------------------------------------------
          MCA coll basic: parameter "coll_basic_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the basic coll component
          MCA coll basic: parameter "coll_basic_crossover" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Minimum number of processes in a communicator before using the logarithmic algorithms
           MCA coll cuda: ---------------------------------------------------
           MCA coll cuda: parameter "coll_cuda_priority" (current value: "78", data source: default, level: 6 tuner/all, type: int)
                          Priority of the cuda coll component; only relevant if barrier_before or barrier_after is > 0
           MCA coll cuda: parameter "coll_cuda_disable_cuda_coll" (current value: "0", data source: default, level: 2 user/detail, type: int)
                          Automatically handle the CUDA buffers for the MPI collective.
            MCA coll ibm: ---------------------------------------------------
            MCA coll ibm: parameter "coll_ibm_priority" (current value: "95", data source: default, level: 9 dev/all, type: int)
                          Priority of the IBM (libcoll) coll component
            MCA coll ibm: parameter "coll_ibm_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
            MCA coll ibm: parameter "coll_ibm_opal_progress_limit" (current value: "128", data source: default, level: 9 dev/all, type: int)
                          Adjust how often we call opal_progress while in a blocking collective (0 = disable, values greater than 0 sets the limit)
            MCA coll ibm: parameter "coll_ibm_comm_lazy_max_wait" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Max number of iterations to wait before falling back on lazy communicator initialization
            MCA coll ibm: parameter "coll_ibm_algorithm" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Force selection of a particular algorithm by index number or name
            MCA coll ibm: parameter "coll_ibm_tune_results" (current value: "/usr/tce/packages/spectrum-mpi/ibm/spectrum-mpi-rolling-release/etc/libcoll_tune_results.xml", data source: default, level: 9 dev/all, type: string)
                          libcoll XML directory prefix. Appends ".d" to create directory name.
            MCA coll ibm: parameter "coll_ibm_xml_cache_min_ppn" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          libcoll XML Cache - minimum number of processes per node required to activate caching
            MCA coll ibm: parameter "coll_ibm_xml_cache_min_nodes" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          libcoll XML Cache - minimum number of nodes required to activate caching
          MCA coll inter: ---------------------------------------------------
          MCA coll inter: parameter "coll_inter_priority" (current value: "40", data source: default, level: 9 dev/all, type: int)
                          Priority of the inter coll component
          MCA coll inter: parameter "coll_inter_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Turn verbose message of the inter coll component on/off
         MCA coll libnbc: ---------------------------------------------------
         MCA coll libnbc: parameter "coll_libnbc_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the libnbc coll component
         MCA coll libnbc: parameter "coll_libnbc_ibcast_skip_dt_decision" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          In ibcast only use size of communicator to choose algorithm, exclude data type signature. Set to 'false' to use data type signature in decision. WARNING: If you set this to 'false' then your application should not use non-uniform data type signatures in calls to ibcast.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
     MCA coll monitoring: ---------------------------------------------------
     MCA coll monitoring: performance "coll_monitoring_messages_count" (type: unsigned_long_long, class: size)
                          Number of messages exchanged through the COLL framework with each peer.
     MCA coll monitoring: performance "coll_monitoring_messages_size" (type: unsigned_long_long, class: size)
                          Size of messages exchanged through the COLL framework with each peer.
     MCA coll monitoring: performance "coll_monitoring_o2a_count" (type: unsigned_long_long, class: counter)
                          Number of messages exchanged as one-to-all operations in a communicator.
     MCA coll monitoring: performance "coll_monitoring_o2a_size" (type: unsigned_long_long, class: aggregate)
                          Size of messages exchanged as one-to-all operations in a communicator.
     MCA coll monitoring: performance "coll_monitoring_a2o_count" (type: unsigned_long_long, class: counter)
                          Number of messages exchanged as all-to-one operations in a communicator.
     MCA coll monitoring: performance "coll_monitoring_a2o_size" (type: unsigned_long_long, class: aggregate)
                          Size of messages exchanged as all-to-one operations in a communicator.
     MCA coll monitoring: performance "coll_monitoring_a2a_count" (type: unsigned_long_long, class: counter)
                          Number of messages exchanged as all-to-all operations in a communicator.
     MCA coll monitoring: performance "coll_monitoring_a2a_size" (type: unsigned_long_long, class: aggregate)
                          Size of messages exchanged as all-to-all operations in a communicator.
           MCA coll self: ---------------------------------------------------
           MCA coll self: parameter "coll_self_priority" (current value: "75", data source: default, level: 9 dev/all, type: int)
             MCA coll sm: ---------------------------------------------------
             MCA coll sm: parameter "coll_sm_priority" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Priority of the sm coll component
             MCA coll sm: parameter "coll_sm_control_size" (current value: "4096", data source: default, level: 9 dev/all, type: int)
                          Length of the control data -- should usually be either the length of a cache line on most SMPs, or the size of a page on machines that support direct memory affinity page placement (in bytes)
             MCA coll sm: parameter "coll_sm_fragment_size" (current value: "8192", data source: default, level: 9 dev/all, type: int)
                          Fragment size (in bytes) used for passing data through shared memory (will be rounded up to the nearest control_size size)
             MCA coll sm: parameter "coll_sm_comm_in_use_flags" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          Number of "in use" flags, used to mark a message passing area segment as currently being used or not (must be >= 2 and <= comm_num_segments)
             MCA coll sm: parameter "coll_sm_comm_num_segments" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Number of segments in each communicator's shared memory message passing area (must be >= 2, and must be a multiple of comm_in_use_flags)
             MCA coll sm: parameter "coll_sm_tree_degree" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Degree of the tree for tree-based operations (must be => 1 and <= min(control_size, 255))
             MCA coll sm: parameter "coll_sm_info_num_procs" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Number of processes to use for the calculation of the shared_mem_size MCA information parameter (must be => 2)
             MCA coll sm: informational "coll_sm_shared_mem_used_data" (current value: "548864", data source: default, level: 9 dev/all, type: int)
                          Amount of shared memory used, per communicator, in the shared memory data area for info_num_procs processes (in bytes)
           MCA coll sync: ---------------------------------------------------
           MCA coll sync: parameter "coll_sync_priority" (current value: "50", data source: default, level: 9 dev/all, type: int)
                          Priority of the sync coll component; only relevant if barrier_before or barrier_after is > 0
           MCA coll sync: parameter "coll_sync_barrier_before" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Do a synchronization before each Nth collective
           MCA coll sync: parameter "coll_sync_barrier_after" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Do a synchronization after each Nth collective
          MCA coll tuned: ---------------------------------------------------
          MCA coll tuned: parameter "coll_tuned_priority" (current value: "-1", data source: environment, level: 6 tuner/all, type: int)
                          Priority of the tuned coll component
          MCA coll tuned: parameter "coll_tuned_init_tree_fanout" (current value: "4", data source: default, level: 6 tuner/all, type: int)
                          Inital fanout used in the tree topologies for each communicator. This is only an initial guess, if a tuned collective needs a different fanout for an operation, it build it dynamically. This parameter is only for the first guess and might save a little time
          MCA coll tuned: parameter "coll_tuned_init_chain_fanout" (current value: "4", data source: default, level: 6 tuner/all, type: int)
                          Inital fanout used in the chain (fanout followed by pipeline) topologies for each communicator. This is only an initial guess, if a tuned collective needs a different fanout for an operation, it build it dynamically. This parameter is only for the first guess and might save a little time
          MCA coll tuned: parameter "coll_tuned_alltoall_small_msg" (current value: "200", data source: default, level: 6 tuner/all, type: int)
                          threshold (if supported) to decide if small MSGs alltoall algorithm will be used
          MCA coll tuned: parameter "coll_tuned_alltoall_intermediate_msg" (current value: "3000", data source: default, level: 6 tuner/all, type: int)
                          threshold (if supported) to decide if intermediate MSGs alltoall algorithm will be used
          MCA coll tuned: parameter "coll_tuned_use_dynamic_rules" (current value: "false", data source: default, level: 6 tuner/all, type: bool)
                          Switch used to decide if we use static (compiled/if statements) or dynamic (built at runtime) decision function rules
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA coll tuned: parameter "coll_tuned_dynamic_rules_filename" (current value: "", data source: default, level: 6 tuner/all, type: string)
                          Filename of configuration file that contains the dynamic (@runtime) decision function rules
          MCA coll tuned: informational "coll_tuned_allreduce_algorithm_count" (current value: "7", data source: default, level: 5 tuner/detail, type: int)
                          Number of allreduce algorithms available
          MCA coll tuned: parameter "coll_tuned_allreduce_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which allreduce algorithm is used. Can be locked down to any of: 0 ignore, 1 basic linear, 2 nonoverlapping (tuned reduce + tuned bcast), 3 recursive doubling, 4 ring, 5 segmented ring
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"nonoverlapping", 3:"recursive_doubling", 4:"ring", 5:"segmented_ring", 6:"rabenseifner"
          MCA coll tuned: parameter "coll_tuned_allreduce_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for allreduce algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
          MCA coll tuned: parameter "coll_tuned_allreduce_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for allreduce algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
          MCA coll tuned: parameter "coll_tuned_allreduce_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for allreduce algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
          MCA coll tuned: informational "coll_tuned_alltoall_algorithm_count" (current value: "6", data source: default, level: 5 tuner/detail, type: int)
                          Number of alltoall algorithms available
          MCA coll tuned: parameter "coll_tuned_alltoall_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which alltoall algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 pairwise, 3: modified bruck, 4: linear with sync, 5:two proc only.
                          Valid values: 0:"ignore", 1:"linear", 2:"pairwise", 3:"modified_bruck", 4:"linear_sync", 5:"two_proc"
          MCA coll tuned: parameter "coll_tuned_alltoall_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for alltoall algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
          MCA coll tuned: parameter "coll_tuned_alltoall_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for alltoall algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
          MCA coll tuned: parameter "coll_tuned_alltoall_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for alltoall algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
          MCA coll tuned: parameter "coll_tuned_alltoall_algorithm_max_requests" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Maximum number of outstanding send or recv requests.  Only has meaning for synchronized algorithms.
          MCA coll tuned: informational "coll_tuned_allgather_algorithm_count" (current value: "7", data source: default, level: 5 tuner/detail, type: int)
                          Number of allgather algorithms available
          MCA coll tuned: parameter "coll_tuned_allgather_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which allallgather algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 bruck, 3 recursive doubling, 4 ring, 5 neighbor exchange, 6: two proc only.
                          Valid values: 0:"ignore", 1:"linear", 2:"bruck", 3:"recursive_doubling", 4:"ring", 5:"neighbor", 6:"two_proc"
          MCA coll tuned: parameter "coll_tuned_allgather_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for allgather algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation. Currently, available algorithms do not support segmentation.
          MCA coll tuned: parameter "coll_tuned_allgather_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for allgather algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation. Currently, available algorithms do not support n-tree topologies.
          MCA coll tuned: parameter "coll_tuned_allgather_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for allgather algorithms. Only has meaning if algorithm is forced and supports chain topo based operation. Currently, available algorithms do not support chain topologies.
          MCA coll tuned: informational "coll_tuned_allgatherv_algorithm_count" (current value: "6", data source: default, level: 5 tuner/detail, type: int)
                          Number of allgatherv algorithms available
          MCA coll tuned: parameter "coll_tuned_allgatherv_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which allallgatherv algorithm is used. Can be locked down to choice of: 0 ignore, 1 default (allgathervv + bcast), 2 bruck, 3 ring, 4 neighbor exchange, 5: two proc only.
                          Valid values: 0:"ignore", 1:"default", 2:"bruck", 3:"ring", 4:"neighbor", 5:"two_proc"
          MCA coll tuned: parameter "coll_tuned_allgatherv_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for allgatherv algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation. Currently, available algorithms do not support segmentation.
          MCA coll tuned: parameter "coll_tuned_allgatherv_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for allgatherv algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation. Currently, available algorithms do not support n-tree topologies.
          MCA coll tuned: parameter "coll_tuned_allgatherv_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for allgatherv algorithms. Only has meaning if algorithm is forced and supports chain topo based operation. Currently, available algorithms do not support chain topologies.
          MCA coll tuned: informational "coll_tuned_alltoallv_algorithm_count" (current value: "3", data source: default, level: 5 tuner/detail, type: int)
                          Number of alltoallv algorithms available
          MCA coll tuned: parameter "coll_tuned_alltoallv_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which alltoallv algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 pairwise.
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"pairwise"
          MCA coll tuned: informational "coll_tuned_barrier_algorithm_count" (current value: "7", data source: default, level: 5 tuner/detail, type: int)
                          Number of barrier algorithms available
          MCA coll tuned: parameter "coll_tuned_barrier_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which barrier algorithm is used. Can be locked down to choice of: 0 ignore, 1 linear, 2 double ring, 3: recursive doubling 4: bruck, 5: two proc only, 6: tree
                          Valid values: 0:"ignore", 1:"linear", 2:"double_ring", 3:"recursive_doubling", 4:"bruck", 5:"two_proc", 6:"tree"
          MCA coll tuned: informational "coll_tuned_bcast_algorithm_count" (current value: "10", data source: default, level: 5 tuner/detail, type: int)
                          Number of bcast algorithms available
          MCA coll tuned: parameter "coll_tuned_bcast_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which bcast algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 chain, 3: pipeline, 4: split binary tree, 5: binary tree, 6: binomial tree, 7: knomial tree, 8: scatter_allgather, 9: scatter_allgather_ring.
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"chain", 3:"pipeline", 4:"split_binary_tree", 5:"binary_tree", 6:"binomial", 7:"knomial", 8:"scatter_allgather", 9:"scatter_allgather_ring"
          MCA coll tuned: parameter "coll_tuned_bcast_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for bcast algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
          MCA coll tuned: parameter "coll_tuned_bcast_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for bcast algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
          MCA coll tuned: parameter "coll_tuned_bcast_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for bcast algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
          MCA coll tuned: parameter "coll_tuned_bcast_algorithm_knomial_radix" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          k-nomial tree radix for the bcast algorithm (radix > 1).
          MCA coll tuned: informational "coll_tuned_reduce_algorithm_count" (current value: "8", data source: default, level: 5 tuner/detail, type: int)
                          Number of reduce algorithms available
          MCA coll tuned: parameter "coll_tuned_reduce_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which reduce algorithm is used. Can be locked down to choice of: 0 ignore, 1 linear, 2 chain, 3 pipeline, 4 binary, 5 binomial, 6 in-order binary, 7 rabenseifner
                          Valid values: 0:"ignore", 1:"linear", 2:"chain", 3:"pipeline", 4:"binary", 5:"binomial", 6:"in-order_binary", 7:"rabenseifner"
          MCA coll tuned: parameter "coll_tuned_reduce_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for reduce algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
          MCA coll tuned: parameter "coll_tuned_reduce_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for reduce algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
          MCA coll tuned: parameter "coll_tuned_reduce_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for reduce algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
          MCA coll tuned: parameter "coll_tuned_reduce_algorithm_max_requests" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Maximum number of outstanding send requests on leaf nodes. 0 means no limit.
          MCA coll tuned: informational "coll_tuned_reduce_scatter_algorithm_count" (current value: "5", data source: default, level: 5 tuner/detail, type: int)
                          Number of reduce_scatter algorithms available
          MCA coll tuned: parameter "coll_tuned_reduce_scatter_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which reduce reduce_scatter algorithm is used. Can be locked down to choice of: 0 ignore, 1 non-overlapping (Reduce + Scatterv), 2 recursive halving, 3 ring, 4 butterfly
                          Valid values: 0:"ignore", 1:"non-overlapping", 2:"recursive_halving", 3:"ring", 4:"butterfly"
          MCA coll tuned: parameter "coll_tuned_reduce_scatter_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for reduce_scatter algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
          MCA coll tuned: parameter "coll_tuned_reduce_scatter_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for reduce_scatter algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
          MCA coll tuned: parameter "coll_tuned_reduce_scatter_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for reduce_scatter algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
          MCA coll tuned: informational "coll_tuned_reduce_scatter_block_algorithm_count" (current value: "5", data source: default, level: 5 tuner/detail, type: int)
                          Number of reduce_scatter_block algorithms available
          MCA coll tuned: parameter "coll_tuned_reduce_scatter_block_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which reduce reduce_scatter_block algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic_linear, 2 recursive_doubling, 3 recursive_halving, 4 butterfly
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"recursive_doubling", 3:"recursive_halving", 4:"butterfly"
          MCA coll tuned: parameter "coll_tuned_reduce_scatter_block_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for reduce_scatter_block algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
          MCA coll tuned: parameter "coll_tuned_reduce_scatter_block_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for reduce_scatter_block algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
          MCA coll tuned: informational "coll_tuned_gather_algorithm_count" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Number of gather algorithms available
          MCA coll tuned: parameter "coll_tuned_gather_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which gather algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 binomial, 3 linear with synchronization.
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"binomial", 3:"linear_sync"
          MCA coll tuned: parameter "coll_tuned_gather_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for gather algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation. Currently, available algorithms do not support segmentation.
          MCA coll tuned: parameter "coll_tuned_gather_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for gather algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation. Currently, available algorithms do not support n-tree topologies.
          MCA coll tuned: parameter "coll_tuned_gather_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for gather algorithms. Only has meaning if algorithm is forced and supports chain topo based operation. Currently, available algorithms do not support chain topologies.
          MCA coll tuned: informational "coll_tuned_scatter_algorithm_count" (current value: "3", data source: default, level: 5 tuner/detail, type: int)
                          Number of scatter algorithms available
          MCA coll tuned: parameter "coll_tuned_scatter_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which scatter algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 binomial.
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"binomial"
          MCA coll tuned: parameter "coll_tuned_scatter_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for scatter algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation. Currently, available algorithms do not support segmentation.
          MCA coll tuned: parameter "coll_tuned_scatter_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for scatter algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation. Currently, available algorithms do not support n-tree topologies.
          MCA coll tuned: parameter "coll_tuned_scatter_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for scatter algorithms. Only has meaning if algorithm is forced and supports chain topo based operation. Currently, available algorithms do not support chain topologies.
          MCA coll tuned: informational "coll_tuned_exscan_algorithm_count" (current value: "3", data source: default, level: 5 tuner/detail, type: int)
                          Number of exscan algorithms available
          MCA coll tuned: parameter "coll_tuned_exscan_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which exscan algorithm is used. Can be locked down to choice of: 0 ignore, 1 linear, 2 recursive_doubling
                          Valid values: 0:"ignore", 1:"linear", 2:"recursive_doubling"
          MCA coll tuned: informational "coll_tuned_scan_algorithm_count" (current value: "3", data source: default, level: 5 tuner/detail, type: int)
                          Number of scan algorithms available
          MCA coll tuned: parameter "coll_tuned_scan_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which scan algorithm is used. Can be locked down to choice of: 0 ignore, 1 linear, 2 recursive_doubling
                          Valid values: 0:"ignore", 1:"linear", 2:"recursive_doubling"
           MCA crcp base: ---------------------------------------------------
           MCA crcp base: parameter "crcp" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the crcp framework (<none> means use all components that can be found)
           MCA crcp base: ---------------------------------------------------
           MCA crcp base: parameter "crcp_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the crcp framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
           MCA fbtl base: ---------------------------------------------------
           MCA fbtl base: parameter "fbtl" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the fbtl framework (<none> means use all components that can be found)
           MCA fbtl base: ---------------------------------------------------
           MCA fbtl base: parameter "fbtl_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the fbtl framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
          MCA fcoll base: ---------------------------------------------------
          MCA fcoll base: parameter "fcoll" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the fcoll framework (<none> means use all components that can be found)
          MCA fcoll base: ---------------------------------------------------
          MCA fcoll base: parameter "fcoll_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the fcoll framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
       MCA fcoll dynamic: ---------------------------------------------------
       MCA fcoll dynamic: parameter "fcoll_dynamic_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the dynamic fcoll component
  MCA fcoll dynamic_gen2: ---------------------------------------------------
  MCA fcoll dynamic_gen2: parameter "fcoll_dynamic_gen2_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the dynamic_gen2 fcoll component
  MCA fcoll dynamic_gen2: parameter "fcoll_dynamic_gen2_num_groups" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Number of subgroups created by the dynamic_gen2 component
  MCA fcoll dynamic_gen2: parameter "fcoll_dynamic_gen2_write_chunksize" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Chunk size written at once. Default: stripe_size of the file system
    MCA fcoll individual: ---------------------------------------------------
    MCA fcoll individual: parameter "fcoll_individual_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the individual fcoll component
     MCA fcoll two_phase: ---------------------------------------------------
     MCA fcoll two_phase: parameter "fcoll_two_phase_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the two_phase fcoll component
        MCA fcoll vulcan: ---------------------------------------------------
        MCA fcoll vulcan: parameter "fcoll_vulcan_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the vulcan fcoll component
        MCA fcoll vulcan: parameter "fcoll_vulcan_num_groups" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Number of subgroups created by the vulcan component
        MCA fcoll vulcan: parameter "fcoll_vulcan_write_chunksize" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Chunk size written at once. Default: stripe_size of the file system
        MCA fcoll vulcan: parameter "fcoll_vulcan_async_io" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Asynchronous I/O support options. 0: Automatic choice (default) 1: Asynchronous I/O only. 2: Synchronous I/O only.
             MCA fs base: ---------------------------------------------------
             MCA fs base: parameter "fs" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the fs framework (<none> means use all components that can be found)
             MCA fs base: ---------------------------------------------------
             MCA fs base: parameter "fs_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the fs framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
              MCA fs ufs: ---------------------------------------------------
              MCA fs ufs: parameter "fs_ufs_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the fs ufs component
              MCA fs ufs: parameter "fs_ufs_lock_algorithm" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Locking algorithm used by the fs ufs component.  0: auto (default), 1: skip locking, 2: always lock entire file, 3: lock only specific ranges
           MCA hook base: ---------------------------------------------------
           MCA hook base: parameter "hook" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the hook framework (<none> means use all components that can be found)
           MCA hook base: ---------------------------------------------------
           MCA hook base: parameter "hook_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the hook framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
     MCA hook ibmlicense: ---------------------------------------------------
     MCA hook ibmlicense: parameter "hook_ibmlicense_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
           MCA hook prot: ---------------------------------------------------
           MCA hook prot: parameter "hook_prot_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
           MCA hook prot: parameter "hook_prot_enable_mpi_init" (current value: "false", data source: default, level: 3 user/all, type: bool)
                          Enable prot behavior on mpi_init
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
           MCA hook prot: parameter "hook_prot_enable_mpi_finalize" (current value: "false", data source: default, level: 3 user/all, type: bool)
                          Enable prot behavior on mpi_finalize
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
          MCA hook state: ---------------------------------------------------
          MCA hook state: parameter "hook_state_all" (current value: "", data source: default, level: 9 dev/all, type: string)
          MCA hook state: parameter "hook_state_ibcounters" (current value: "", data source: default, level: 9 dev/all, type: string)
             MCA io base: ---------------------------------------------------
             MCA io base: parameter "io" (current value: "romio321", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the io framework (<none> means use all components that can be found)
             MCA io base: ---------------------------------------------------
             MCA io base: parameter "io_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the io framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
        MCA (-) io ompio: ---------------------------------------------------
        MCA (-) io ompio: parameter "io_ompio_priority" (current value: "30", data source: default, level: 9 dev/all, type: int)
                          Priority of the io ompio component
        MCA (-) io ompio: parameter "io_ompio_delete_priority" (current value: "30", data source: default, level: 9 dev/all, type: int)
                          Delete priority of the io ompio component
        MCA (-) io ompio: parameter "io_ompio_record_file_offset_info" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          The information of the file offset/length
        MCA (-) io ompio: parameter "io_ompio_coll_timing_info" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Enable collective algorithm timing information
        MCA (-) io ompio: parameter "io_ompio_cycle_buffer_size" (current value: "536870912", data source: default, level: 9 dev/all, type: int)
                          Data size issued by individual reads/writes per call
        MCA (-) io ompio: parameter "io_ompio_bytes_per_agg" (current value: "33554432", data source: default, level: 9 dev/all, type: int)
                          Size of temporary buffer for collective I/O operations
        MCA (-) io ompio: parameter "io_ompio_num_aggregators" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          number of aggregators for collective I/O operations
        MCA (-) io ompio: parameter "io_ompio_grouping_option" (current value: "5", data source: default, level: 9 dev/all, type: int)
                          Option for grouping of processes in the aggregator selection 1: Data volume based grouping 2: maximizing group size uniformity 3: maximimze data contiguity 4: hybrid optimization  5: simple (default) 6: skip refinement step 7: simple+: grouping based on default file view
        MCA (-) io ompio: parameter "io_ompio_max_aggregators_ratio" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Maximum number of processes that can be an aggregator expressed as the ratio to the number of process used to open the file i.e 1 out of n processes can be an aggregator, with n being specified by this mca parameter.
        MCA (-) io ompio: parameter "io_ompio_aggregators_cutoff_threshold" (current value: "3", data source: default, level: 9 dev/all, type: int)
                          Relativ cutoff threshold for incrementing the number of aggregators in the simple aggregator selection algorithm (5). Lower value for this parameter will lead to higher no. of aggregators.
        MCA (-) io ompio: parameter "io_ompio_overwrite_amode" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Overwrite WRONLY amode to RDWR to enable data sieving 1: allow overwrite (default) 0: do not overwrite amode provided by application
        MCA (-) io ompio: parameter "io_ompio_verbose_info_parsing" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Provide visual output when parsing info objects 0: no verbose output (default) 1: verbose output by rank 0 2: verbose output by all ranks
         MCA io romio321: ---------------------------------------------------
         MCA io romio321: parameter "io_romio321_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the io romio component
         MCA io romio321: parameter "io_romio321_delete_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Delete priority of the io romio component
         MCA io romio321: informational "io_romio321_version" (current value: "from MPICH v3.1.4", data source: default, level: 9 dev/all, type: string)
                          Version of ROMIO
         MCA io romio321: informational "io_romio321_user_configure_params" (current value: "CFLAGS=-I/__SMPI_build_dir________________________/cuda/cuda-10.1/include/cuda -DROMIO_CUDA_AWARE_SUPPORT=1 --with-file-system=nfs+ufs+gpfs", data source: default, level: 9 dev/all, type: string)
                          User-specified command line parameters passed to ROMIO's configure script
         MCA io romio321: informational "io_romio321_complete_configure_params" (current value: "CFLAGS=-I/__SMPI_build_dir________________________/cuda/cuda-10.1/include/cuda -DROMIO_CUDA_AWARE_SUPPORT=1 --with-file-system=nfs+ufs+gpfs  --enable-grequest-extensions FROM_OMPI=yes CC='gcc -std=gnu99 -std=gnu99' CFLAGS='-DNDEBUG -m64 -O3 -DSMPI_IS_EVAL_EDITION=0 -Wall -Wundef -Wno-long-long -Wsign-compare -Wmissing-prototypes -Wstrict-prototypes -Wcomment -pedantic -Werror-implicit-function-declaration -finline-functions -fno-strict-aliasing -pthread -D__EXTENSIONS__' CPPFLAGS='   -I/__SMPI_build_dir________________________/hwloc/hwloc-2.0.3_ompi-cuda-10.1-libevent-2.1.8/include  -I/__SMPI_build_dir________________________/libevent/libevent-2.1.8/include' FFLAGS='' LDFLAGS='-L/__SMPI_build_dir________________________/dependencies/lib -L/__SMPI_build_dir________________________/mofed/mofed_451/usr/lib -L/__SMPI_build_dir________________________/mofed/mofed_451/opt/mellanox/mxm/lib -L/__SMPI_build_dir________________________/mofed/mofed_451/opt/mellanox/hcoll/lib -L/__SMPI_build_dir________________________/mofed/mofed_451/opt/mellanox/sharp/lib -L/__SMPI_build_dir________________________/cuda/cuda-10.1/lib/nvidia -L/__SMPI_build_dir________________________/cuda/cuda-10.1/lib   -L/__SMPI_build_dir________________________/hwloc/hwloc-2.0.3_ompi-cuda-10.1-libevent-2.1.8/lib  -L/__SMPI_build_dir________________________/libevent/libevent-2.1.8/lib' --enable-shared --disable-static CFLAGS=-I/__SMPI_build_dir________________________/cuda/cuda-10.1/include/cuda -DROMIO_CUDA_AWARE_SUPPORT=1 --with-file-system=nfs+ufs+gpfs  --enable-grequest-extensions --prefix=/__SMPI_build_dir________________________/exports/optimized --disable-aio --disable-weak-symbols --enable-strict --disable-f77 --disable-f90", data source: default, level: 9 dev/all, type: string)
                          Complete set of command line parameters passed to ROMIO's configure script
            MCA mtl base: ---------------------------------------------------
            MCA mtl base: parameter "mtl" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the mtl framework (<none> means use all components that can be found)
            MCA mtl base: ---------------------------------------------------
            MCA mtl base: parameter "mtl_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the mtl framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
             MCA op base: ---------------------------------------------------
             MCA op base: parameter "op" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the op framework (<none> means use all components that can be found)
             MCA op base: ---------------------------------------------------
             MCA op base: parameter "op_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the op framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA osc base: ---------------------------------------------------
            MCA osc base: parameter "osc" (current value: "pami", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the osc framework (<none> means use all components that can be found)
            MCA osc base: ---------------------------------------------------
            MCA osc base: parameter "osc_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the osc framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
  MCA (-) osc monitoring: ---------------------------------------------------
  MCA (-) osc monitoring: performance "osc_monitoring_messages_sent_count" (type: unsigned_long_long, class: size)
                          Number of messages sent through the OSC framework with each peer.
  MCA (-) osc monitoring: performance "osc_monitoring_messages_sent_size" (type: unsigned_long_long, class: size)
                          Size of messages sent through the OSC framework with each peer.
  MCA (-) osc monitoring: performance "osc_monitoring_messages_recv_count" (type: unsigned_long_long, class: size)
                          Number of messages received through the OSC framework with each peer.
  MCA (-) osc monitoring: performance "osc_monitoring_messages_recv_size" (type: unsigned_long_long, class: size)
                          Size of messages received through the OSC framework with each peer.
            MCA osc pami: ---------------------------------------------------
            MCA osc pami: parameter "osc_pami_no_locks" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Enable optimizations available only if MPI_LOCK is not used.  Info key of same name overrides this value.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA osc pami: parameter "osc_pami_max_ctrl_sends" (current value: "1024", data source: default, level: 3 user/all, type: unsigned_int)
            MCA osc pami: parameter "osc_pami_rma_pending" (current value: "1024", data source: default, level: 3 user/all, type: unsigned_int)
            MCA osc pami: parameter "osc_pami_use_get" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
            MCA osc pami: parameter "osc_pami_priority" (current value: "95", data source: default, level: 3 user/all, type: int)
                          Priority of the osc/pami component (default: 95)
            MCA osc pami: parameter "osc_pami_allow_thread_multiple" (current value: "true", data source: default, level: 1 user/basic, type: bool)
                          Allow osc_pami to run when user passes inMPI_THREAD_MULTIPLE (default: true)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA osc pami: parameter "osc_pami_use_tunnel_atomics" (current value: "false", data source: default, level: 1 user/basic, type: bool)
                          Enable tunnel atomics where possible in osc_pami (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA osc pami: parameter "osc_pami_tunnel_atomics_hint_commutative_operations" (current value: "false", data source: default, level: 1 user/basic, type: bool)
                          Hint to tunnel atomics that all operations are commutative (Example: MPI_REPLACE would not be a commutative operation) (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA osc pami: parameter "osc_pami_tunnel_atomics_limit" (current value: "4000", data source: default, level: 1 user/basic, type: unsigned_int)
                          Largest request size (in bytes, default: 4000) that will use tunnel atomics (osc_pami_use_tunnel_atomics must be true)
       MCA (-) osc pt2pt: ---------------------------------------------------
       MCA (-) osc pt2pt: parameter "osc_pt2pt_enable" (current value: "true", data source: default, level: 1 user/basic, type: bool)
                          Enable/Disable osc_pt2pt (default: true)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA (-) osc pt2pt: parameter "osc_pt2pt_allow_thread_multiple" (current value: "true", data source: default, level: 1 user/basic, type: bool)
                          Allow osc_pt2pt to run when user passes in MPI_THREAD_MULTIPLE (default: true)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA (-) osc pt2pt: parameter "osc_pt2pt_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of osc_pt2pt
       MCA (-) osc pt2pt: parameter "osc_pt2pt_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          [0-99] Priority of osc_pt2pt
       MCA (-) osc pt2pt: parameter "osc_pt2pt_no_locks" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable optimizations available only if MPI_LOCK is not used.  Info key of same name overrides this value.
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA (-) osc pt2pt: parameter "osc_pt2pt_buffer_size" (current value: "8192", data source: default, level: 9 dev/all, type: unsigned_int)
                          Data transfers smaller than this limit may be coalesced before being transferred (default: 8k)
       MCA (-) osc pt2pt: parameter "osc_pt2pt_receive_count" (current value: "4", data source: default, level: 4 tuner/basic, type: unsigned_int)
                          Number of receives to post for each window for incoming fragments (default: 4)
        MCA (-) osc rdma: ---------------------------------------------------
        MCA (-) osc rdma: parameter "osc_rdma_no_locks" (current value: "false", data source: default, level: 5 tuner/detail, type: bool)
                          Enable optimizations available only if MPI_LOCK is not used. Info key of same name overrides this value (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
        MCA (-) osc rdma: parameter "osc_rdma_acc_single_intrinsic" (current value: "false", data source: default, level: 5 tuner/detail, type: bool)
                          Enable optimizations for MPI_Fetch_and_op, MPI_Accumulate, etc for codes that will not use anything more than a single predefined datatype (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
        MCA (-) osc rdma: parameter "osc_rdma_acc_use_amo" (current value: "true", data source: default, level: 5 tuner/detail, type: bool)
                          Enable the use of network atomic memory operations when using single intrinsic optimizations. If not set network compare-and-swap will be used instread (default: true)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
        MCA (-) osc rdma: parameter "osc_rdma_buffer_size" (current value: "32768", data source: default, level: 3 user/all, type: unsigned_int)
                          Size of temporary buffers (default: 32768)
        MCA (-) osc rdma: parameter "osc_rdma_max_attach" (current value: "32", data source: default, level: 3 user/all, type: unsigned_int)
                          Maximum number of buffers that can be attached to a dynamic window. Keep in mind that each attached buffer will use a potentially limited resource (default: 32)
        MCA (-) osc rdma: parameter "osc_rdma_priority" (current value: "101", data source: default, level: 3 user/all, type: unsigned_int)
                          Priority of the osc/rdma component (default: 101)
        MCA (-) osc rdma: parameter "osc_rdma_locking_mode" (current value: "two_level", data source: default, level: 3 user/all, type: int)
                          Locking mode to use for passive-target synchronization (default: two_level)
                          Valid values: 0:"two_level", 1:"on_demand"
        MCA (-) osc rdma: parameter "osc_rdma_btls" (current value: "openib,ugni,uct,ucp", data source: default, level: 3 user/all, type: string)
                          Comma-delimited list of BTL component names to allow without verifying connectivity. Do not add a BTL to to this list unless it can reach all processes in any communicator used with an MPI window (default: openib,ugni,uct,ucp)
        MCA (-) osc rdma: parameter "osc_rdma_mtls" (current value: "psm2", data source: default, level: 3 user/all, type: string)
                          Comma-delimited list of MTL component names to lower the priority of rdma osc component favoring pt2pt osc (default: psm2)
        MCA (-) osc rdma: parameter "osc_rdma_backing_directory" (current value: "/dev/shm", data source: default, level: 3 user/all, type: string)
                          Directory to place backing files for memory windows. This directory should be on a local filesystem such as /tmp or /dev/shm (default: (linux) /dev/shm, (others) session directory)
        MCA (-) osc rdma: performance "osc_rdma_put_retry_count" (type: unsigned_long, class: counter)
                          Number of times put transaction were retried due to resource limitations
        MCA (-) osc rdma: performance "osc_rdma_get_retry_count" (type: unsigned_long, class: counter)
                          Number of times get transaction were retried due to resource limitations
          MCA (-) osc sm: ---------------------------------------------------
          MCA (-) osc sm: parameter "osc_sm_backing_directory" (current value: "/dev/shm", data source: default, level: 3 user/all, type: string)
                          Directory to place backing files for shared memory windows. This directory should be on a local filesystem such as /tmp or /dev/shm (default: (linux) /dev/shm, (others) session directory)
          MCA (-) osc sm: parameter "osc_sm_allow_thread_multiple" (current value: "false", data source: default, level: 1 user/basic, type: bool)
                          Allow osc_sm to run when user passes inMPI_THREAD_MULTIPLE (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
         MCA (-) osc ucx: ---------------------------------------------------
         MCA (-) osc ucx: parameter "osc_ucx_priority" (current value: "60", data source: default, level: 3 user/all, type: unsigned_int)
                          Priority of the osc/ucx component (default: 60)
         MCA (-) osc ucx: parameter "osc_ucx_verbose" (current value: "0", data source: default, level: 3 user/all, type: int, synonym of: opal_common_ucx_verbose)
                          Verbose level of the UCX components
         MCA (-) osc ucx: parameter "osc_ucx_progress_iterations" (current value: "100", data source: default, level: 3 user/all, type: int, synonym of: opal_common_ucx_progress_iterations)
                          Set number of calls of internal UCX progress calls per opal_progress call
         MCA (-) osc ucx: parameter "osc_ucx_opal_mem_hooks" (current value: "true", data source: environment, level: 3 user/all, type: bool, synonym of: opal_common_ucx_opal_mem_hooks)
                          Use OPAL memory hooks, instead of UCX internal memory hooks
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA pml base: ---------------------------------------------------
            MCA pml base: parameter "pml" (current value: "pami", data source: environment, level: 2 user/detail, type: string)
                          Default selection set of components for the pml framework (<none> means use all components that can be found)
            MCA pml base: ---------------------------------------------------
            MCA pml base: parameter "pml_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the pml framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
            MCA pml base: parameter "pml_base_bsend_allocator" (current value: "basic", data source: default, level: 9 dev/all, type: string)
           MCA (-) pml v: ---------------------------------------------------
           MCA (-) pml v: parameter "pml_v_output" (current value: "stderr", data source: default, level: 9 dev/all, type: string)
           MCA (-) pml v: parameter "pml_v_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of the pml v component
           MCA (-) pml v: parameter "pml_v_vprotocol" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: vprotocol)
                          Specify a specific vprotocol to use
          MCA (-) pml cm: ---------------------------------------------------
          MCA (-) pml cm: parameter "pml_cm_free_list_num" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Initial size of request free lists
          MCA (-) pml cm: parameter "pml_cm_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum size of request free lists
          MCA (-) pml cm: parameter "pml_cm_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
                          Number of elements to add when growing request free lists
  MCA (-) pml monitoring: ---------------------------------------------------
  MCA (-) pml monitoring: parameter "pml_monitoring_enable" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          Enable the monitoring at the PML level. A value of 0 will disable the monitoring (default). A value of 1 will aggregate all monitoring information (point-to-point and collective). Any other value will enable filtered monitoring
  MCA (-) pml monitoring: parameter "pml_monitoring_enable_output" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Enable the PML monitoring textual output at MPI_Finalize (it will be automatically turned off when MPIT is used to monitor communications). This value should be different than 0 in order for the output to be enabled (default disable)
  MCA (-) pml monitoring: parameter "pml_monitoring_filename" (current value: "", data source: default, level: 9 dev/all, type: string)
                          The name of the file where the monitoring information should be saved (the filename will be extended with the process rank and the ".prof" extension). If this field is NULL the monitoring will not be saved.
  MCA (-) pml monitoring: performance "pml_monitoring_flush" (type: string, class: generic)
                          Flush the monitoring information in the provided file. The filename is append with the .%d.prof suffix, where %d is replaced with the processus rank in MPI_COMM_WORLD.
  MCA (-) pml monitoring: performance "pml_monitoring_messages_count" (type: unsigned_long_long, class: size)
                          Number of messages sent to each peer through the PML framework.
  MCA (-) pml monitoring: performance "pml_monitoring_messages_size" (type: unsigned_long_long, class: size)
                          Size of messages sent to each peer in a communicator through the PML framework.
         MCA (-) pml ob1: ---------------------------------------------------
         MCA (-) pml ob1: parameter "pml_ob1_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_free_list_num" (current value: "4", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_priority" (current value: "20", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_send_pipeline_depth" (current value: "3", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_recv_pipeline_depth" (current value: "4", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_max_rdma_per_request" (current value: "4", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_max_send_per_range" (current value: "4", data source: default, level: 9 dev/all, type: int)
         MCA (-) pml ob1: parameter "pml_ob1_unexpected_limit" (current value: "128", data source: default, level: 9 dev/all, type: unsigned_int)
         MCA (-) pml ob1: parameter "pml_ob1_use_all_rdma" (current value: "false", data source: default, level: 5 tuner/detail, type: bool)
                          Use all available RDMA btls for the RDMA and RDMA pipeline protocols (default: false)
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
         MCA (-) pml ob1: parameter "pml_ob1_allocator" (current value: "bucket", data source: default, level: 9 dev/all, type: string)
                          Name of allocator component for unexpected messages
         MCA (-) pml ob1: performance "pml_ob1_unexpected_msgq_length" (type: unsigned_int, class: size)
                          Number of unexpected messages received by each peer in a communicator
         MCA (-) pml ob1: performance "pml_ob1_posted_recvq_length" (type: unsigned_int, class: size)
                          Number of unmatched receives posted for each peer in a communicator
            MCA pml pami: ---------------------------------------------------
            MCA pml pami: parameter "pml_pami_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbose level of the PAMI PML component
            MCA pml pami: parameter "pml_pami_context_advance_niter" (current value: "1", data source: environment, level: 9 dev/all, type: unsigned_int)
                          Number of iterations for PAMI context advance
            MCA pml pami: parameter "pml_pami_priority" (current value: "60", data source: default, level: 3 user/all, type: int)
                          Priority of the PAMI PML component
            MCA pml pami: parameter "pml_pami_unexpected_limit" (current value: "256", data source: default, level: 9 dev/all, type: unsigned_int)
            MCA pml pami: parameter "pml_pami_local_eager_limit" (current value: "12288", data source: default, level: 4 tuner/basic, type: size_t, synonyms: pml_pami_shm_attach_thresh)
                          Rendezvous threshold for intra-node messages. Switches from shmem FIFO to CMA as well if PAMI_SHMEM_DMA_ENABLE is set to 1.
            MCA pml pami: parameter "pml_pami_shm_attach_thresh" (current value: "12288", data source: default, level: 4 tuner/basic, type: size_t, synonym of: pml_pami_local_eager_limit)
                          Rendezvous threshold for intra-node messages. Switches from shmem FIFO to CMA as well if PAMI_SHMEM_DMA_ENABLE is set to 1.
            MCA pml pami: parameter "pml_pami_remote_eager_limit" (current value: "65537", data source: default, level: 4 tuner/basic, type: size_t)
                          Rendezvous threshold for inter-node messages.
            MCA pml pami: parameter "pml_pami_use_get" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
                          Select whether PAMI uses RDMA/CMA for rendezvous messages(0 = PAMI uses RDMA/CMA, nonzero = PAMI falls back to send/recv)
            MCA pml pami: parameter "pml_pami_use_2sided" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
                          Enable hardware tag matching in PAMI if the network adaptersupports it. If enabled on hardware that does not support this feature, a software emulation path in PAMI will be used.(0 = Tag matching is disabled in PAMI, nonzero = PAMI enables tag matching)
            MCA pml pami: parameter "pml_pami_free_list_num" (current value: "128", data source: default, level: 9 dev/all, type: int)
                          Initial size of request free lists (default: 128)
            MCA pml pami: parameter "pml_pami_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum size of request free lists (default: -1)
            MCA pml pami: parameter "pml_pami_free_list_inc" (current value: "128", data source: default, level: 9 dev/all, type: int)
                          Number of elements to add when growing request free lists (default: 128)
            MCA pml pami: parameter "pml_pami_enable_cuda" (current value: "1", data source: environment, level: 9 dev/all, type: unsigned_int)
            MCA pml pami: parameter "pml_pami_enable_cuda_noncontig_noncompliant" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
            MCA pml pami: parameter "pml_pami_enable_cuda_mmodp" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
            MCA pml pami: parameter "pml_pami_verify_cuda_driver_level" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Whether to error out if the CUDA driver level is too low
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
            MCA pml pami: parameter "pml_pami_touch_recvbuf" (current value: "0", data source: default, level: 9 dev/all, type: unsigned_int)
                          Select whether or not to touch RMDA recvbuf (and force pagefault) when using ODP(0 = Do not touch pages, nonzero = touch recvbuf pages)
         MCA (-) pml ucx: ---------------------------------------------------
         MCA (-) pml ucx: parameter "pml_ucx_priority" (current value: "51", data source: default, level: 3 user/all, type: int)
                          Priority of the UCX component
         MCA (-) pml ucx: parameter "pml_ucx_num_disconnect" (current value: "1", data source: default, level: 3 user/all, type: int)
                          How may disconnects go in parallel
         MCA (-) pml ucx: parameter "pml_ucx_verbose" (current value: "0", data source: default, level: 3 user/all, type: int, synonym of: opal_common_ucx_verbose)
                          Verbose level of the UCX components
         MCA (-) pml ucx: parameter "pml_ucx_progress_iterations" (current value: "100", data source: default, level: 3 user/all, type: int, synonym of: opal_common_ucx_progress_iterations)
                          Set number of calls of internal UCX progress calls per opal_progress call
         MCA (-) pml ucx: parameter "pml_ucx_opal_mem_hooks" (current value: "true", data source: environment, level: 3 user/all, type: bool, synonym of: opal_common_ucx_opal_mem_hooks)
                          Use OPAL memory hooks, instead of UCX internal memory hooks
                          Valid values: 0: f|false|disabled|no|n, 1: t|true|enabled|yes|y
       MCA (-) pml yalla: ---------------------------------------------------
       MCA (-) pml yalla: parameter "pml_yalla_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbose level of the yalla component
       MCA (-) pml yalla: parameter "pml_yalla_priority" (current value: "50", data source: default, level: 3 user/all, type: int)
                          Priority of the yalla component
            MCA rte base: ---------------------------------------------------
            MCA rte base: parameter "rte" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rte framework (<none> means use all components that can be found)
            MCA rte base: ---------------------------------------------------
            MCA rte base: parameter "rte_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rte framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
       MCA sharedfp base: ---------------------------------------------------
       MCA sharedfp base: parameter "sharedfp" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the sharedfp framework (<none> means use all components that can be found)
       MCA sharedfp base: ---------------------------------------------------
       MCA sharedfp base: parameter "sharedfp_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the sharedfp framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
 MCA sharedfp individual: ---------------------------------------------------
 MCA sharedfp individual: parameter "sharedfp_individual_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the individual sharedfp component
 MCA sharedfp individual: parameter "sharedfp_individual_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of the individual sharedfp component
 MCA sharedfp lockedfile: ---------------------------------------------------
 MCA sharedfp lockedfile: parameter "sharedfp_lockedfile_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the lockedfile sharedfp component
 MCA sharedfp lockedfile: parameter "sharedfp_lockedfile_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of the lockedfile sharedfp component
         MCA sharedfp sm: ---------------------------------------------------
         MCA sharedfp sm: parameter "sharedfp_sm_priority" (current value: "30", data source: default, level: 9 dev/all, type: int)
                          Priority of the sm sharedfp component
         MCA sharedfp sm: parameter "sharedfp_sm_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of the sm sharedfp component
           MCA topo base: ---------------------------------------------------
           MCA topo base: parameter "topo" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the topo framework (<none> means use all components that can be found)
           MCA topo base: ---------------------------------------------------
           MCA topo base: parameter "topo_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the topo framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
      MCA topo treematch: ---------------------------------------------------
      MCA topo treematch: parameter "topo_treematch_reorder_mode" (current value: "0", data source: default, level: 2 user/detail, type: int)
                          If set the reordering will be done in a partially distributed way (default=0). If partially-distributed only local knowledge will be used, possibly leading to less accurate reordering.
      MCA vprotocol base: ---------------------------------------------------
      MCA vprotocol base: parameter "vprotocol" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: pml_v_vprotocol)
                          Specify a specific vprotocol to use
      MCA vprotocol base: ---------------------------------------------------
      MCA vprotocol base: parameter "vprotocol_base_verbose" (current value: "error", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the vprotocol framework (default: 0)
                          Valid values: -1:"none", 0:"error", 10:"component", 20:"warn", 40:"info", 60:"trace", 80:"debug", 100:"max", 0 - 100
 MCA vprotocol pessimist: ---------------------------------------------------
 MCA vprotocol pessimist: parameter "vprotocol_pessimist_priority" (current value: "30", data source: default, level: 9 dev/all, type: int)
 MCA vprotocol pessimist: parameter "vprotocol_pessimist_free_list_num" (current value: "16", data source: default, level: 9 dev/all, type: int)
 MCA vprotocol pessimist: parameter "vprotocol_pessimist_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
 MCA vprotocol pessimist: parameter "vprotocol_pessimist_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
 MCA vprotocol pessimist: parameter "vprotocol_pessimist_sender_based_chunk" (current value: "268435456", data source: default, level: 9 dev/all, type: int)
 MCA vprotocol pessimist: parameter "vprotocol_pessimist_event_buffer_size" (current value: "1024", data source: default, level: 9 dev/all, type: int)
 MCA vprotocol pessimist: parameter "vprotocol_pessimist_sender_based_file" (current value: "vprotocol_pessimist-senderbased", data source: default, level: 9 dev/all, type: string)
app 0: ompi_info --all --level 9 
rank: 0: { host: 1; cpu: {0-3} ; gpu: {0} ; mem: {0-8150} } : app 0

------------------------------------------------------------
Sender: LSF System <lsfadmin@lassen710>
Subject: Job 1142855: <info> in cluster <lassen> Done

Job <info> was submitted from host <lassen709> by user <bienz1> in cluster <lassen> at Tue May 26 11:14:16 2020
Job was executed on host(s) <1*lassen710>, in queue <pdebug>, as user <bienz1> in cluster <lassen> at Tue May 26 11:14:43 2020
                            <40*lassen4>
</g/g14/bienz1> was used as the home directory.
</g/g14/bienz1/nodecomm> was used as the working directory.
Started at Tue May 26 11:14:43 2020
Terminated at Tue May 26 11:14:50 2020
Results reported at Tue May 26 11:14:50 2020

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
#!/bin/bash
#BSUB -J info
#BSUB -e info.%J.err
#BSUB -o info.%J.out
#BSUB -nnodes 1
#BSUB -q pdebug
#BSUB -W 00:05

module load hwloc

cd /g/g14/bienz1/nodecomm

jsrun -a1 -c1 -g1 -r1 -n1 -M "-gpu" --latency_priority=gpu-cpu --print_placement=1 ompi_info --all --level 9 


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   0.21 sec.
    Max Memory :                                 -
    Average Memory :                             -
    Total Requested Memory :                     -
    Delta Memory :                               -
    Max Swap :                                   -
    Max Processes :                              -
    Max Threads :                                -
    Run time :                                   6 sec.
    Turnaround time :                            34 sec.

The output (if any) is above this job summary.



PS:

Read file <info.1142855.err> for stderr output of this job.

